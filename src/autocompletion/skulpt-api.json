{
    "": [
        {
            "acResult": "round",
            "documentation": "Round a number to a given precision in decimal digits.\n\nThe return value is an integer if ndigits is omitted or None.  Otherwise\nthe return value has the same type as the number.  ndigits may be negative.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "number"
                },
                {
                    "name": "ndigits",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "len",
            "documentation": "Return the number of items in a container.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "obj"
                }
            ]
        },
        {
            "acResult": "min",
            "documentation": "min(iterable, *[, default=obj, key=func]) -> value\nmin(arg1, arg2, *args, *[, key=func]) -> value\n\nWith a single iterable argument, return its smallest item. The\ndefault keyword-only argument specifies an object to return if\nthe provided iterable is empty.\nWith two or more arguments, return the smallest argument.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "max",
            "documentation": "max(iterable, *[, default=obj, key=func]) -> value\nmax(arg1, arg2, *args, *[, key=func]) -> value\n\nWith a single iterable argument, return its biggest item. The\ndefault keyword-only argument specifies an object to return if\nthe provided iterable is empty.\nWith two or more arguments, return the largest argument.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "sum",
            "documentation": "Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n\nWhen the iterable is empty, return the start value.\nThis function is intended specifically for use with numeric values and may\nreject non-numeric types.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                },
                {
                    "name": "start",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "abs",
            "documentation": "Return the absolute value of the argument.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "fabs",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ord",
            "documentation": "Return the Unicode code point for a one-character string.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "c"
                }
            ]
        },
        {
            "acResult": "chr",
            "documentation": "Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "i"
                }
            ]
        },
        {
            "acResult": "hex",
            "documentation": "Return the hexadecimal representation of an integer.\n\n   >>> hex(12648430)\n   '0xc0ffee'",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "number"
                }
            ]
        },
        {
            "acResult": "oct",
            "documentation": "Return the octal representation of an integer.\n\n   >>> oct(342391)\n   '0o1234567'",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "number"
                }
            ]
        },
        {
            "acResult": "bin",
            "documentation": "Return the binary representation of an integer.\n\n   >>> bin(2796202)\n   '0b1010101010101010101010'",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "number"
                }
            ]
        },
        {
            "acResult": "dir",
            "documentation": "dir([object]) -> list of strings\n\nIf called without an argument, return the names in the current scope.\nElse, return an alphabetized list of names comprising (some of) the attributes\nof the given object, and of attributes reachable from it.\nIf the object supplies a method named __dir__, it will be used; otherwise\nthe default dir() logic is used and returns:\n  for a module object: the module's attributes.\n  for a class object:  its attributes, and recursively the attributes\n    of its bases.\n  for any other object: its attributes, its class's attributes, and\n    recursively the attributes of its class's base classes.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "repr",
            "documentation": "Return the canonical string representation of the object.\n\nFor many object types, including most builtins, eval(repr(obj)) == obj.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "obj"
                }
            ]
        },
        {
            "acResult": "open",
            "documentation": "open(name[, mode[, buffering]]) -> file object\n\nOpen a file using the file() type, returns a file object.  This is the\npreferred way to open a file.  See file.__doc__ for further information.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "file"
                },
                {
                    "name": "mode",
                    "defaultValue": "None"
                },
                {
                    "name": "buffering",
                    "defaultValue": "True"
                },
                {
                    "name": "encoding",
                    "defaultValue": "None"
                },
                {
                    "name": "errors",
                    "defaultValue": "None"
                },
                {
                    "name": "newline",
                    "defaultValue": "None"
                },
                {
                    "name": "closefd",
                    "defaultValue": "-1"
                },
                {
                    "name": "opener",
                    "defaultValue": "r"
                }
            ]
        },
        {
            "acResult": "isinstance",
            "documentation": "Return whether an object is an instance of a class or of a subclass thereof.\n\nA tuple, as in ``isinstance(x, (A, B, ...))``, may be given as the target to\ncheck against. This is equivalent to ``isinstance(x, A) or isinstance(x, B)\nor ...`` etc.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "obj"
                },
                {
                    "name": "class_or_tuple"
                }
            ]
        },
        {
            "acResult": "hash",
            "documentation": "Return the hash value for the given object.\n\nTwo objects that compare equal must also have the same hash value, but the\nreverse is not necessarily true.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "obj"
                }
            ]
        },
        {
            "acResult": "getattr",
            "documentation": "getattr(object, name[, default]) -> value\n\nGet a named attribute from an object; getattr(x, 'y') is equivalent to x.y.\nWhen a default argument is given, it is returned when the attribute doesn't\nexist; without it, an exception is raised in that case.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "object"
                },
                {
                    "name": "name"
                }
            ]
        },
        {
            "acResult": "hasattr",
            "documentation": "Return whether the object has an attribute with the given name.\n\nThis is done by calling getattr(obj, name) and catching AttributeError.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "obj"
                },
                {
                    "name": "name"
                }
            ]
        },
        {
            "acResult": "id",
            "documentation": "Return the identity of an object.\n\nThis is guaranteed to be unique among simultaneously existing objects.\n(CPython uses the object's memory address.)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "obj"
                }
            ]
        },
        {
            "acResult": "sorted",
            "documentation": "Return a new list containing all items from the iterable in ascending order.\n\nA custom key function can be supplied to customize the sort order, and the\nreverse flag can be set to request the result in descending order.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "any",
            "documentation": "Return True if bool(x) is True for any x in the iterable.\n\nIf the iterable is empty, return False.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "all",
            "documentation": "Return True if bool(x) is True for all values x in the iterable.\n\nIf the iterable is empty, return True.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "enumerate",
            "documentation": "Return an enumerate object.\n\n  iterable\n    an object supporting iteration\n\nThe enumerate object yields pairs containing a count (from start, which\ndefaults to zero) and a value yielded by the iterable argument.\n\nenumerate is useful for obtaining an indexed list:\n    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable",
                    "hide": true
                },
                {
                    "name": "start",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "filter",
            "documentation": "Return an iterator yielding those items of iterable for which function(item)\nis true. If function is None, return the items that are true.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "map",
            "documentation": "map(func, *iterables) --> map object\n\nMake an iterator that computes the function using arguments from\neach of the iterables.  Stops when the shortest iterable is exhausted.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "range",
            "documentation": "range(stop) -> range object\nrange(start, stop[, step]) -> range object\n\nReturn an object that produces a sequence of integers from start (inclusive)\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\nThese are exactly the valid indices for a list of 4 elements.\nWhen step is given, it specifies the increment (or decrement).",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "reversed",
            "documentation": "Return a reverse iterator over the values of the given sequence.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "sequence",
                    "hide": true
                }
            ]
        },
        {
            "acResult": "zip",
            "documentation": "zip(iter1 [,iter2 [...]]) --> zip object\n\nReturn a zip object whose .__next__() method returns a tuple where\nthe i-th element comes from the i-th iterable argument.  The .__next__()\nmethod continues until the shortest iterable in the argument sequence\nis exhausted and then it raises StopIteration.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "BaseException",
            "documentation": "Common base class for all exceptions",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "AttributeError",
            "documentation": "Attribute not found.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "ArithmeticError",
            "documentation": "Base class for arithmetic errors.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "ValueError",
            "documentation": "Inappropriate argument value (of correct type).",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "Exception",
            "documentation": "Common base class for all non-exit exceptions.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "ZeroDivisionError",
            "documentation": "Second argument to a division or modulo operation was zero.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "AssertionError",
            "documentation": "Assertion failed.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "ImportError",
            "documentation": "Import can't find module, or can't find name in module.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "ModuleNotFoundError",
            "documentation": "Module not found.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "IndentationError",
            "documentation": "Improper indentation.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "IndexError",
            "documentation": "Sequence index out of range.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "LookupError",
            "documentation": "Base class for lookup errors.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "KeyError",
            "documentation": "Mapping key not found.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "TypeError",
            "documentation": "Inappropriate argument type.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "UnicodeDecodeError",
            "documentation": "Unicode decoding error.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "UnicodeEncodeError",
            "documentation": "Unicode encoding error.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "NameError",
            "documentation": "Name not found globally.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "UnboundLocalError",
            "documentation": "Local name referenced but not bound to a value.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "IOError",
            "documentation": "Base class for I/O related errors.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "NotImplementedError",
            "documentation": "Method or function hasn't been implemented yet.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "SystemExit",
            "documentation": "Request to exit from the interpreter.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "OverflowError",
            "documentation": "Result too large to be represented.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "OperationError",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NegativePowerError",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RuntimeError",
            "documentation": "Unspecified run-time error.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "RecursionError",
            "documentation": "Recursion limit exceeded.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "StopIteration",
            "documentation": "Signal the end from iterator.__next__().",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "SyntaxError",
            "documentation": "Invalid syntax.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "SystemError",
            "documentation": "Internal error in the Skulpt interpreter.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "KeyboardInterrupt",
            "documentation": "Program interrupted by user.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "float",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x",
                    "hide": true,
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "int",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "bool",
            "documentation": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "complex",
            "documentation": "Create a complex number from a real part and an optional imaginary part.\n\nThis is equivalent to (real + imag*1j) where imag defaults to 0.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "real",
                    "hide": true,
                    "defaultValue": "0"
                },
                {
                    "name": "imag",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "dict",
            "documentation": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "file",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "frozenset",
            "documentation": "frozenset() -> empty frozenset object\nfrozenset(iterable) -> frozenset object\n\nBuild an immutable unordered collection of unique elements.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "function",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "generator",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "list",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable",
                    "hide": true,
                    "defaultValue": "()"
                }
            ]
        },
        {
            "acResult": "long",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "method",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "object",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "slice",
            "documentation": "slice(stop)\nslice(start, stop[, step])\n\nCreate a slice object.  This is used for extended slicing (e.g. a[0:10:2]).",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "str",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "set",
            "documentation": "set() -> new empty set object\nset(iterable) -> new set object\n\nBuild an unordered collection of unique elements.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "tuple",
            "documentation": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable",
                    "hide": true,
                    "defaultValue": "()"
                }
            ]
        },
        {
            "acResult": "type",
            "documentation": "type(object_or_name, bases, dict)\ntype(object) -> the object's type\ntype(name, bases, dict) -> a new type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "input",
            "documentation": "Read a string from standard input.  The trailing newline is stripped.\n\nThe prompt string, if given, is printed to standard output without a\ntrailing newline before reading input.\n\nIf the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), raise EOFError.\nOn *nix systems, readline is used if available.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "prompt",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "raw_input",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "setattr",
            "documentation": "Sets the named attribute on the given object to the specified value.\n\nsetattr(x, 'y', v) is equivalent to ``x.y = v''",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "obj"
                },
                {
                    "name": "name"
                },
                {
                    "name": "value"
                }
            ]
        },
        {
            "acResult": "jseval",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "jsmillis",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "quit",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self"
                },
                {
                    "name": "code",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "exit",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self"
                },
                {
                    "name": "code",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "print",
            "documentation": "print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": []
        },
        {
            "acResult": "divmod",
            "documentation": "Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y"
                }
            ]
        },
        {
            "acResult": "format",
            "documentation": "Return value.__format__(format_spec)\n\nformat_spec defaults to the empty string.\nSee the Format Specification Mini-Language section of help('FORMATTING') for\ndetails.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "value"
                },
                {
                    "name": "format_spec",
                    "defaultValue": ""
                }
            ]
        },
        {
            "acResult": "globals",
            "documentation": "Return the dictionary containing the current scope's global variables.\n\nNOTE: Updates to this dictionary *will* affect name lookups in the current\nglobal scope and vice-versa.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "issubclass",
            "documentation": "Return whether 'cls' is a derived from another class or is the same class.\n\nA tuple, as in ``issubclass(x, (A, B, ...))``, may be given as the target to\ncheck against. This is equivalent to ``issubclass(x, A) or issubclass(x, B)\nor ...`` etc.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "cls"
                },
                {
                    "name": "class_or_tuple"
                }
            ]
        },
        {
            "acResult": "iter",
            "documentation": "iter(iterable) -> iterator\niter(callable, sentinel) -> iterator\n\nGet an iterator from an object.  In the first form, the argument must\nsupply its own iterator, or be a sequence.\nIn the second form, the callable is called until it returns the sentinel.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "execfile",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "help",
            "documentation": "Define the builtin 'help'.\n\nThis is a wrapper around pydoc.help that provides a helpful message\nwhen 'help' is typed at the Python interactive prompt.\n\nCalling help() at the Python prompt starts an interactive help session.\nCalling help(thing) prints help for the python object 'thing'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "memoryview",
            "documentation": "Create a new memoryview object which references the given object.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "reload",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "super",
            "documentation": "super() -> same as super(__class__, <first argument>)\nsuper(type) -> unbound super object\nsuper(type, obj) -> bound super object; requires isinstance(obj, type)\nsuper(type, type2) -> bound super object; requires issubclass(type2, type)\nTypical use to call a cooperative superclass method:\nclass C(B):\n    def meth(self, arg):\n        super().meth(arg)\nThis works for class methods too:\nclass C(B):\n    @classmethod\n    def cmeth(cls, arg):\n        super().cmeth(arg)\n",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "unichr",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "vars",
            "documentation": "vars([object]) -> dictionary\n\nWithout arguments, equivalent to locals().\nWith an argument, equivalent to object.__dict__.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "apply",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "buffer",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "coerce",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "intern",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "property",
            "documentation": "Property attribute.\n\n  fget\n    function to be used for getting an attribute value\n  fset\n    function to be used for setting an attribute value\n  fdel\n    function to be used for del'ing an attribute\n  doc\n    docstring\n\nTypical use is to define a managed attribute x:\n\nclass C(object):\n    def getx(self): return self._x\n    def setx(self, value): self._x = value\n    def delx(self): del self._x\n    x = property(getx, setx, delx, \"I'm the 'x' property.\")\n\nDecorators make defining new properties or modifying existing ones easy:\n\nclass C(object):\n    @property\n    def x(self):\n        \"I am the 'x' property.\"\n        return self._x\n    @x.setter\n    def x(self, value):\n        self._x = value\n    @x.deleter\n    def x(self):\n        del self._x",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "fget",
                    "hide": true,
                    "defaultValue": "None"
                },
                {
                    "name": "fset",
                    "defaultValue": "None"
                },
                {
                    "name": "fdel",
                    "defaultValue": "None"
                },
                {
                    "name": "doc",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "classmethod",
            "documentation": "classmethod(function) -> method\n\nConvert a function to be a class method.\n\nA class method receives the class as implicit first argument,\njust like an instance method receives the instance.\nTo declare a class method, use this idiom:\n\n  class C:\n      @classmethod\n      def f(cls, arg1, arg2, ...):\n          ...\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\nIf a class method is called for a derived class, the derived class\nobject is passed as the implied first argument.\n\nClass methods are different than C++ or Java static methods.\nIf you want those, see the staticmethod builtin.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "staticmethod",
            "documentation": "staticmethod(function) -> method\n\nConvert a function to be a static method.\n\nA static method does not receive an implicit first argument.\nTo declare a static method, use this idiom:\n\n     class C:\n         @staticmethod\n         def f(arg1, arg2, ...):\n             ...\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\n\nStatic methods in Python are similar to those found in Java or C++.\nFor a more advanced concept, see the classmethod builtin.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "Ellipsis",
            "documentation": "The most base type",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__import__",
            "documentation": "__import__(name, globals=None, locals=None, fromlist=(), level=0) -> module\n\nImport a module. Because this function is meant for use by the Python\ninterpreter and not for general use, it is better to use\nimportlib.import_module() to programmatically import a module.\n\nThe globals argument is only used to determine the context;\nthey are not modified.  The locals argument is unused.  The fromlist\nshould be a list of names to emulate ``from name import ...'', or an\nempty list to emulate ``import name''.\nWhen importing a module from a package, note that __import__('A.B', ...)\nreturns package A when fromlist is empty, but its submodule B when\nfromlist is not empty.  The level argument is used to determine whether to\nperform absolute or relative imports: 0 is absolute, while a positive number\nis the number of parent directories to search relative to the current module.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "name"
                }
            ]
        },
        {
            "acResult": "ascii",
            "documentation": "Return an ASCII-only representation of an object.\n\nAs repr(), return a string containing a printable representation of an\nobject, but escape the non-ASCII characters in the string returned by\nrepr() using \\\\x, \\\\u or \\\\U escapes. This generates a string similar\nto that returned by repr() in Python 2.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "obj"
                }
            ]
        },
        {
            "acResult": "callable",
            "documentation": "Return whether the object is callable (i.e., some kind of function).\n\nNote that classes are callable, as are instances of classes with a\n__call__() method.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "obj"
                }
            ]
        },
        {
            "acResult": "compile",
            "documentation": "Compile source into a code object that can be executed by exec() or eval().\n\nThe source code may represent a Python module, statement or expression.\nThe filename will be used for run-time error messages.\nThe mode must be 'exec' to compile a module, 'single' to compile a\nsingle (interactive) statement, or 'eval' to compile an expression.\nThe flags argument, if present, controls which future statements influence\nthe compilation of the code.\nThe dont_inherit argument, if true, stops the compilation inheriting\nthe effects of any future statements in effect in the code calling\ncompile; if absent or false these statements do influence the compilation,\nin addition to any features explicitly specified.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "source"
                },
                {
                    "name": "filename"
                },
                {
                    "name": "mode"
                },
                {
                    "name": "flags",
                    "defaultValue": "-1"
                },
                {
                    "name": "dont_inherit",
                    "defaultValue": "False"
                },
                {
                    "name": "optimize",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "delattr",
            "documentation": "Deletes the named attribute from the given object.\n\ndelattr(x, 'y') is equivalent to ``del x.y''",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "obj"
                },
                {
                    "name": "name"
                }
            ]
        },
        {
            "acResult": "eval",
            "documentation": "Evaluate the given source in the context of globals and locals.\n\nThe source may be a string representing a Python expression\nor a code object as returned by compile().\nThe globals must be a dictionary and locals can be any mapping,\ndefaulting to the current globals and locals.\nIf only globals is given, locals defaults to it.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "source"
                },
                {
                    "name": "globals",
                    "defaultValue": "None"
                },
                {
                    "name": "locals",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "exec",
            "documentation": "Execute the given source in the context of globals and locals.\n\nThe source may be a string representing one or more Python statements\nor a code object as returned by compile().\nThe globals must be a dictionary and locals can be any mapping,\ndefaulting to the current globals and locals.\nIf only globals is given, locals defaults to it.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "source"
                },
                {
                    "name": "globals",
                    "defaultValue": "None"
                },
                {
                    "name": "locals",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "locals",
            "documentation": "Return a dictionary containing the current scope's local variables.\n\nNOTE: Whether or not updates to this dictionary will affect name lookups in\nthe local scope and vice-versa is *implementation dependent* and not\ncovered by any backwards compatibility guarantees.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "next",
            "documentation": "next(iterator[, default])\n\nReturn the next item from the iterator. If default is given and the iterator\nis exhausted, it is returned instead of raising StopIteration.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterator"
                }
            ]
        },
        {
            "acResult": "pow",
            "documentation": "Equivalent to x**y (with two arguments) or x**y % z (with three arguments)\n\nSome types, such as ints, are able to use a more efficient algorithm when\ninvoked using the three argument form.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "base"
                },
                {
                    "name": "exp"
                },
                {
                    "name": "mod",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "int.from_bytes",
            "documentation": "Return the integer represented by the given array of bytes.\n\nbytes\n  Holds the array of bytes to convert.  The argument must either\n  support the buffer protocol or be an iterable object producing bytes.\n  Bytes and bytearray are examples of built-in objects that support the\n  buffer protocol.\nbyteorder\n  The byte order used to represent the integer.  If byteorder is 'big',\n  the most significant byte is at the beginning of the byte array.  If\n  byteorder is 'little', the most significant byte is at the end of the\n  byte array.  To request the native byte order of the host system, use\n  `sys.byteorder' as the byte order value.\nsigned\n  Indicates whether two's complement is used to represent the integer.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "type",
                    "hide": true
                },
                {
                    "name": "bytes"
                },
                {
                    "name": "byteorder"
                }
            ]
        },
        {
            "acResult": "bool.from_bytes",
            "documentation": "Return the integer represented by the given array of bytes.\n\nbytes\n  Holds the array of bytes to convert.  The argument must either\n  support the buffer protocol or be an iterable object producing bytes.\n  Bytes and bytearray are examples of built-in objects that support the\n  buffer protocol.\nbyteorder\n  The byte order used to represent the integer.  If byteorder is 'big',\n  the most significant byte is at the beginning of the byte array.  If\n  byteorder is 'little', the most significant byte is at the end of the\n  byte array.  To request the native byte order of the host system, use\n  `sys.byteorder' as the byte order value.\nsigned\n  Indicates whether two's complement is used to represent the integer.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "type",
                    "hide": true
                },
                {
                    "name": "bytes"
                },
                {
                    "name": "byteorder"
                }
            ]
        },
        {
            "acResult": "dict.fromkeys",
            "documentation": "Create a new dictionary with keys from iterable and values set to value.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "type",
                    "hide": true
                },
                {
                    "name": "iterable"
                },
                {
                    "name": "value",
                    "defaultValue": "None"
                }
            ]
        }
    ],
    "test": [
        {
            "acResult": "__author__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__path__",
            "documentation": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "testEqual",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "testNotEqual",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        }
    ],
    "unittest": [
        {
            "acResult": "TestCase",
            "documentation": "A class whose instances are single test cases.\n\nBy default, the test code itself should be placed in a method named\n'runTest'.\n\nIf the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.\n\nTest authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.\n\nIf it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.\n\nWhen subclassing TestCase, you can set these attributes:\n* failureException: determines which exception will be raised when\n    the instance's assertion methods fail; test methods raising this\n    exception will be deemed to have 'failed' rather than 'errored'.\n* longMessage: determines whether long messages (including repr of\n    objects used in assert methods) will be printed on failure in *addition*\n    to any explicit message passed.\n* maxDiff: sets the maximum length of a diff in failure messages\n    by assert methods using difflib. It is looked up as an instance\n    attribute so can be configured by individual tests if required.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "methodName",
                    "defaultValue": "runTest"
                }
            ]
        },
        {
            "acResult": "_AssertRaisesContext",
            "documentation": "A context manager used to implement TestCase.assertRaises* methods.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "__author__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__path__",
            "documentation": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "main",
            "documentation": "A command-line program that runs a set of tests; this is primarily\nfor making test modules conveniently executable.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self"
                },
                {
                    "name": "module",
                    "defaultValue": "None"
                },
                {
                    "name": "defaultTest",
                    "defaultValue": "None"
                },
                {
                    "name": "argv",
                    "defaultValue": "None"
                },
                {
                    "name": "testRunner",
                    "defaultValue": "None"
                },
                {
                    "name": "testLoader",
                    "defaultValue": "1"
                },
                {
                    "name": "exit",
                    "defaultValue": "True"
                },
                {
                    "name": "verbosity",
                    "defaultValue": "<unittest.loader.TestLoader object at 0x102c655b0>"
                },
                {
                    "name": "failfast",
                    "defaultValue": "None"
                },
                {
                    "name": "catchbreak",
                    "defaultValue": "None"
                },
                {
                    "name": "buffer",
                    "defaultValue": "None"
                },
                {
                    "name": "warnings",
                    "defaultValue": "__main__"
                }
            ]
        },
        {
            "acResult": "re",
            "documentation": "",
            "type": [
                "module"
            ],
            "version": 0
        }
    ],
    "urllib": [
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__path__",
            "documentation": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        }
    ],
    "urllib.request": [
        {
            "acResult": "Response",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__path__",
            "documentation": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "urlopen",
            "documentation": "Open the URL url, which can be either a string or a Request object.\n\n*data* must be an object specifying additional data to be sent to\nthe server, or None if no such data is needed.  See Request for\ndetails.\n\nurllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\nheader in its HTTP requests.\n\nThe optional *timeout* parameter specifies a timeout in seconds for\nblocking operations like the connection attempt (if not specified, the\nglobal default timeout setting will be used). This only works for HTTP,\nHTTPS and FTP connections.\n\nIf *context* is specified, it must be a ssl.SSLContext instance describing\nthe various SSL options. See HTTPSConnection for more details.\n\nThe optional *cafile* and *capath* parameters specify a set of trusted CA\ncertificates for HTTPS requests. cafile should point to a single file\ncontaining a bundle of CA certificates, whereas capath should point to a\ndirectory of hashed certificate files. More information can be found in\nssl.SSLContext.load_verify_locations().\n\nThe *cadefault* parameter is ignored.\n\n\nThis function always returns an object which can work as a\ncontext manager and has the properties url, headers, and status.\nSee urllib.response.addinfourl for more detail on these properties.\n\nFor HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\nobject slightly modified. In addition to the three new methods above, the\nmsg attribute contains the same information as the reason attribute ---\nthe reason phrase returned by the server --- instead of the response\nheaders as it is specified in the documentation for HTTPResponse.\n\nFor FTP, file, and data URLs and requests explicitly handled by legacy\nURLopener and FancyURLopener classes, this function returns a\nurllib.response.addinfourl object.\n\nNote that None may be returned if no handler handles the request (though\nthe default installed global OpenerDirector uses UnknownHandler to ensure\nthis never happens).\n\nIn addition, if proxy settings are detected (for example, when a *_proxy\nenvironment variable like http_proxy is set), ProxyHandler is default\ninstalled and makes sure the requests are handled through the proxy.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "url"
                },
                {
                    "name": "data",
                    "defaultValue": "<object object at 0x10218dc50>"
                },
                {
                    "name": "timeout",
                    "defaultValue": "None"
                }
            ]
        }
    ],
    "webgl": [
        {
            "acResult": "Context",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "Float32Array",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "Matrix4x4",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__path__",
            "documentation": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": [],
            "version": 0
        }
    ],
    "antigravity": [
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "webbrowser",
            "documentation": "Interfaces for launching and remotely controlling Web browsers.",
            "type": [
                "module"
            ],
            "version": 0
        }
    ],
    "array": [
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Loader for extension modules.\n\nThe constructor is designed to work with FileFinder.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "array",
            "documentation": "Return a new array whose items are restricted by typecode, and\ninitialized from the optional initializer value, which must be a list,\nstring or iterable over elements of the appropriate type.\n\nArrays represent basic values and behave very much like lists, except\nthe type of objects stored in them is constrained. The type is specified\nat object creation time by using a type code, which is a single character.\nThe following type codes are defined:\n\n    Type code   C Type             Minimum size in bytes\n    'b'         signed integer     1\n    'B'         unsigned integer   1\n    'u'         Unicode character  2 (see note)\n    'h'         signed integer     2\n    'H'         unsigned integer   2\n    'i'         signed integer     2\n    'I'         unsigned integer   2\n    'l'         signed integer     4\n    'L'         unsigned integer   4\n    'q'         signed integer     8 (see note)\n    'Q'         unsigned integer   8 (see note)\n    'f'         floating point     4\n    'd'         floating point     8\n\nNOTE: The 'u' typecode corresponds to Python's unicode character. On\nnarrow builds this is 2-bytes on wide builds this is 4-bytes.\n\nNOTE: The 'q' and 'Q' type codes are only available if the platform\nC compiler used to build Python supports 'long long', or, on Windows,\n'__int64'.\n\nMethods:\n\nappend() -- append a new item to the end of the array\nbuffer_info() -- return information giving the current memory info\nbyteswap() -- byteswap all the items of the array\ncount() -- return number of occurrences of an object\nextend() -- extend array by appending multiple elements from an iterable\nfromfile() -- read items from a file object\nfromlist() -- append items from the list\nfrombytes() -- append items from the string\nindex() -- return index of first occurrence of an object\ninsert() -- insert a new item into the array at a provided position\npop() -- remove and return item (default last)\nremove() -- remove first occurrence of an object\nreverse() -- reverse the order of the items in the array\ntofile() -- write all items to a file object\ntolist() -- return the array converted to an ordinary list\ntobytes() -- return the array converted to a string\n\nAttributes:\n\ntypecode -- the typecode character used to create the array\nitemsize -- the length in bytes of one array item",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        }
    ],
    "bisect": [
        {
            "acResult": "__doc__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "bisect",
            "documentation": "Return the index where to insert item x in list a, assuming a is sorted.\n\n    The return value i is such that all e in a[:i] have e <= x, and all e in\n    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will\n    insert just after the rightmost x already there.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "x"
                },
                {
                    "name": "lo",
                    "defaultValue": "None"
                },
                {
                    "name": "hi",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "bisect_left",
            "documentation": "Return the index where to insert item x in list a, assuming a is sorted.\n\n    The return value i is such that all e in a[:i] have e < x, and all e in\n    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will\n    insert just before the leftmost x already there.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "x"
                },
                {
                    "name": "lo",
                    "defaultValue": "None"
                },
                {
                    "name": "hi",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "bisect_right",
            "documentation": "Return the index where to insert item x in list a, assuming a is sorted.\n\n    The return value i is such that all e in a[:i] have e <= x, and all e in\n    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will\n    insert just after the rightmost x already there.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "x"
                },
                {
                    "name": "lo",
                    "defaultValue": "None"
                },
                {
                    "name": "hi",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "insort",
            "documentation": "Insert item x in list a, and keep it sorted assuming a is sorted.\n\n    If x is already in a, insert it to the right of the rightmost x.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "x"
                },
                {
                    "name": "lo",
                    "defaultValue": "None"
                },
                {
                    "name": "hi",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "insort_left",
            "documentation": "Insert item x in list a, and keep it sorted assuming a is sorted.\n\n    If x is already in a, insert it to the left of the leftmost x.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "x"
                },
                {
                    "name": "lo",
                    "defaultValue": "None"
                },
                {
                    "name": "hi",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "insort_right",
            "documentation": "Insert item x in list a, and keep it sorted assuming a is sorted.\n\n    If x is already in a, insert it to the right of the rightmost x.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "x"
                },
                {
                    "name": "lo",
                    "defaultValue": "None"
                },
                {
                    "name": "hi",
                    "defaultValue": "0"
                }
            ]
        }
    ],
    "collections": [
        {
            "acResult": "Counter",
            "documentation": "Dict subclass for counting hashable items.  Sometimes called a bag\n    or multiset.  Elements are stored as dictionary keys and their counts\n    are stored as dictionary values.\n\n    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string\n\n    >>> c.most_common(3)                # three most common elements\n    [('a', 5), ('b', 4), ('c', 3)]\n    >>> sorted(c)                       # list all unique elements\n    ['a', 'b', 'c', 'd', 'e']\n    >>> ''.join(sorted(c.elements()))   # list elements with repetitions\n    'aaaaabbbbcccdde'\n    >>> sum(c.values())                 # total of all counts\n    15\n\n    >>> c['a']                          # count of letter 'a'\n    5\n    >>> for elem in 'shazam':           # update counts from an iterable\n    ...     c[elem] += 1                # by adding 1 to each element's count\n    >>> c['a']                          # now there are seven 'a'\n    7\n    >>> del c['b']                      # remove all 'b'\n    >>> c['b']                          # now there are zero 'b'\n    0\n\n    >>> d = Counter('simsalabim')       # make another counter\n    >>> c.update(d)                     # add in the second counter\n    >>> c['a']                          # now there are nine 'a'\n    9\n\n    >>> c.clear()                       # empty the counter\n    >>> c\n    Counter()\n\n    Note:  If a count is set to zero or reduced to zero, it will remain\n    in the counter until the entry is deleted or the counter is cleared:\n\n    >>> c = Counter('aaabbc')\n    >>> c['b'] -= 2                     # reduce the count of 'b' by two\n    >>> c.most_common()                 # 'b' is still in, but its count is zero\n    [('a', 3), ('c', 1), ('b', 0)]\n\n",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "iterable",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "OrderedDict",
            "documentation": "Dictionary that remembers insertion order",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "__all__",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "_chain",
            "documentation": "chain(*iterables) --> chain object\n\nReturn a chain object whose .__next__() method returns elements from the\nfirst iterable until it is exhausted, then elements from the next\niterable, until all of the iterables are exhausted.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "_iskeyword",
            "documentation": "Return key in self.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "_itemgetter",
            "documentation": "Return a callable object that fetches the given item(s) from its operand.\n            After f = itemgetter(2), the call f(r) returns r[2].\n            After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "_repeat",
            "documentation": "repeat(object [,times]) -> create an iterator which returns the object\nfor the specified number of times.  If not specified, returns the object\nendlessly.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "_starmap",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "function",
                    "hide": true
                },
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "defaultdict",
            "documentation": "defaultdict(default_factory[, ...]) --> dict with default factory\n\nThe default factory is called without arguments to produce\na new value when a key is not present, in __getitem__ only.\nA defaultdict compares equal to a dict with the same items.\nAll remaining arguments are treated the same as if they were\npassed to the dict constructor, including keyword arguments.\n",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "deque",
            "documentation": "deque([iterable[, maxlen]]) --> deque object\n\nA list-like sequence optimized for data accesses near its endpoints.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "namedtuple",
            "documentation": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "typename"
                },
                {
                    "name": "field_names"
                }
            ]
        },
        {
            "acResult": "Counter.fromkeys",
            "documentation": "Create a new dictionary with keys from iterable and values set to value.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "cls",
                    "hide": true
                },
                {
                    "name": "iterable"
                },
                {
                    "name": "v",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "OrderedDict.fromkeys",
            "documentation": "Create a new dictionary with keys from iterable and values set to value.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "type",
                    "hide": true
                },
                {
                    "name": "iterable"
                },
                {
                    "name": "value",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "_chain.from_iterable",
            "documentation": "chain.from_iterable(iterable) --> chain object\n\nAlternate chain() constructor taking a single iterable argument\nthat evaluates lazily.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "type",
                    "hide": true
                },
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "defaultdict.fromkeys",
            "documentation": "Create a new dictionary with keys from iterable and values set to value.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "type",
                    "hide": true
                },
                {
                    "name": "iterable"
                },
                {
                    "name": "value",
                    "defaultValue": "None"
                }
            ]
        }
    ],
    "copy": [
        {
            "acResult": "Error",
            "documentation": "Common base class for all non-exit exceptions.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "_EmptyClass",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "_copy_inst",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "_deepcopy_atomic",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "memo"
                }
            ]
        },
        {
            "acResult": "_deepcopy_dict",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "memo"
                },
                {
                    "name": "deepcopy",
                    "defaultValue": "<function deepcopy at 0x104b869d0>"
                }
            ]
        },
        {
            "acResult": "_deepcopy_dispatch",
            "documentation": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "_deepcopy_frozenset",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "_deepcopy_inst",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "_deepcopy_list",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "memo"
                },
                {
                    "name": "deepcopy",
                    "defaultValue": "<function deepcopy at 0x104b869d0>"
                }
            ]
        },
        {
            "acResult": "_deepcopy_set",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "_deepcopy_tuple",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "memo"
                },
                {
                    "name": "deepcopy",
                    "defaultValue": "<function deepcopy at 0x104b869d0>"
                }
            ]
        },
        {
            "acResult": "_keep_alive",
            "documentation": "Keeps a reference to the object x in the memo.\n    Because we remember objects by their id, we have\n    to assure that possibly temporary objects are kept\n    alive by referencing them.\n    We store a reference at the id of the memo, which should\n    normally not be used unless someone tries to deepcopy\n    the memo itself...\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "memo"
                }
            ]
        },
        {
            "acResult": "_reconstruct",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "memo"
                },
                {
                    "name": "func"
                },
                {
                    "name": "args"
                },
                {
                    "name": "state",
                    "defaultValue": "<function deepcopy at 0x104b869d0>"
                },
                {
                    "name": "listiter",
                    "defaultValue": "None"
                },
                {
                    "name": "dictiter",
                    "defaultValue": "None"
                },
                {
                    "name": "deepcopy",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "check_notimplemented_state",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "copy",
            "documentation": "Shallow copy operation on arbitrary Python objects.\n\nSee the module's __doc__ string for more info.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "deepcopy",
            "documentation": "Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "memo",
                    "defaultValue": "[]"
                },
                {
                    "name": "_nil",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "error",
            "documentation": "Common base class for all non-exit exceptions.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "long",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "long.from_bytes",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        }
    ],
    "datetime": [
        {
            "acResult": "MAXYEAR",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MINYEAR",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__all__",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "date",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "datetime",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "time",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "timedelta",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "timezone",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "tzinfo",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "date.fromisocalendar",
            "documentation": "int -> date corresponding to a proleptic Gregorian ordinal.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "date.fromisoformat",
            "documentation": "str -> Construct a date from the output of date.isoformat()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "date.fromordinal",
            "documentation": "int -> date corresponding to a proleptic Gregorian ordinal.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "date.fromtimestamp",
            "documentation": "timestamp -> local date from a POSIX timestamp (like time.time()).",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "type",
                    "hide": true
                },
                {
                    "name": "timestamp"
                }
            ]
        },
        {
            "acResult": "date.today",
            "documentation": "Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "datetime.combine",
            "documentation": "date, time -> datetime with same date and time fields",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "datetime.fromisocalendar",
            "documentation": "int -> date corresponding to a proleptic Gregorian ordinal.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "datetime.fromisoformat",
            "documentation": "string -> datetime from datetime.isoformat() output",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "datetime.fromordinal",
            "documentation": "int -> date corresponding to a proleptic Gregorian ordinal.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "datetime.fromtimestamp",
            "documentation": "timestamp[, tz] -> tz's local time from POSIX timestamp.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "datetime.now",
            "documentation": "Returns new datetime object representing current time local to tz.\n\n  tz\n    Timezone object.\n\nIf no tz is specified, uses local timezone.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "type",
                    "hide": true
                },
                {
                    "name": "tz",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "datetime.strptime",
            "documentation": "string, format -> new datetime parsed from a string (like time.strptime()).",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "datetime.today",
            "documentation": "Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "datetime.utcfromtimestamp",
            "documentation": "Construct a naive UTC datetime from a POSIX timestamp.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "datetime.utcnow",
            "documentation": "Return a new datetime representing UTC day and time.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "time.fromisoformat",
            "documentation": "string -> time from time.isoformat() output",
            "type": [
                "function"
            ],
            "version": 0
        }
    ],
    "document": [
        {
            "acResult": "ATTRIBUTE_NODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CDATA_SECTION_NODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "COMMENT_NODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOCUMENT_FRAGMENT_NODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOCUMENT_NODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOCUMENT_POSITION_CONTAINED_BY",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOCUMENT_POSITION_CONTAINS",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOCUMENT_POSITION_DISCONNECTED",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOCUMENT_POSITION_FOLLOWING",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOCUMENT_POSITION_PRECEDING",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOCUMENT_TYPE_NODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ELEMENT_NODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ENTITY_NODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ENTITY_REFERENCE_NODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NOTATION_NODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PROCESSING_INSTRUCTION_NODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TEXT_NODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "URL",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__bool__",
            "documentation": "self != 0",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__call__",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__class__",
            "documentation": "Create a module object.\n\nThe name must be a string; the optional doc argument can have any type.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "__contains__",
            "documentation": "Return key in self.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__delattr__",
            "documentation": "Implement delattr(self, name).",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__delitem__",
            "documentation": "Delete self[key].",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__dir__",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__eq__",
            "documentation": "Return self==value.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__format__",
            "documentation": "Default object formatter.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__ge__",
            "documentation": "Return self>=value.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__getattribute__",
            "documentation": "Return getattr(self, name).",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__getitem__",
            "documentation": "Return self[key].",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__gt__",
            "documentation": "Return self>value.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__hash__",
            "documentation": "Return hash(self).",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__init__",
            "documentation": "Initialize self.  See help(type(self)) for accurate signature.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__init_subclass__",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__le__",
            "documentation": "Return self<=value.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__lt__",
            "documentation": "Return self<value.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__module__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__ne__",
            "documentation": "Return self!=value.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__new__",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__repr__",
            "documentation": "Return repr(self).",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__setattr__",
            "documentation": "Implement setattr(self, name, value).",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__setitem__",
            "documentation": "Set self[key] to value.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__str__",
            "documentation": "Return str(self).",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "activeElement",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "addEventListener",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "adoptNode",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "adoptedStyleSheets",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "alinkColor",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "all",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "anchors",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "append",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "appendChild",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "applets",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "baseURI",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "bgColor",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "body",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "captureEvents",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "caretRangeFromPoint",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "characterSet",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "charset",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "childElementCount",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "childNodes",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "children",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "clear",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "cloneNode",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "close",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "compareDocumentPosition",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "compatMode",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "constructor",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "contains",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "contentType",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "cookie",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "createAttribute",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createAttributeNS",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createCDATASection",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createComment",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createDocumentFragment",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createElement",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createElementNS",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createEvent",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createExpression",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createNSResolver",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createNodeIterator",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createProcessingInstruction",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createRange",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createTextNode",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createTreeWalker",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "currentScript",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "defaultView",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "designMode",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "dir",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "dispatchEvent",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "doctype",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "documentElement",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "documentURI",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "domain",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "elementFromPoint",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "elementsFromPoint",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "embeds",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "evaluate",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "execCommand",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "exitFullscreen",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "exitPictureInPicture",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "exitPointerLock",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "featurePolicy",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "fgColor",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "firstChild",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "firstElementChild",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "fonts",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "forms",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "fragmentDirective",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "fullscreen",
            "documentation": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "fullscreenElement",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "fullscreenEnabled",
            "documentation": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "get",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getAnimations",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getElementById",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getElementsByClassName",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getElementsByName",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getElementsByTagName",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getElementsByTagNameNS",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getRootNode",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getSelection",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "hasChildNodes",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "hasFocus",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "head",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "hidden",
            "documentation": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "images",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "implementation",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "importNode",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "inputEncoding",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "insertBefore",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "isConnected",
            "documentation": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "isDefaultNamespace",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "isEqualNode",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "isSameNode",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "keys",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "lastChild",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "lastElementChild",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "lastModified",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "linkColor",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "links",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "location",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "lookupNamespaceURI",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "lookupPrefix",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "nextSibling",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "nodeName",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "nodeType",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "nodeValue",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "normalize",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "onabort",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onanimationend",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onanimationiteration",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onanimationstart",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onauxclick",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onbeforecopy",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onbeforecut",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onbeforeinput",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onbeforematch",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onbeforepaste",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onbeforetoggle",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onbeforexrselect",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onblur",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "oncancel",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "oncanplay",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "oncanplaythrough",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onchange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onclick",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onclose",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "oncontentvisibilityautostatechange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "oncontextlost",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "oncontextmenu",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "oncontextrestored",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "oncopy",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "oncuechange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "oncut",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ondblclick",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ondrag",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ondragend",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ondragenter",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ondragleave",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ondragover",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ondragstart",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ondrop",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ondurationchange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onemptied",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onended",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onerror",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onfocus",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onformdata",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onfreeze",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onfullscreenchange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onfullscreenerror",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ongotpointercapture",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "oninput",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "oninvalid",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onkeydown",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onkeypress",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onkeyup",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onload",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onloadeddata",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onloadedmetadata",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onloadstart",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onlostpointercapture",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onmousedown",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onmouseenter",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onmouseleave",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onmousemove",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onmouseout",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onmouseover",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onmouseup",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onmousewheel",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onpaste",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onpause",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onplay",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onplaying",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onpointercancel",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onpointerdown",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onpointerenter",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onpointerleave",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onpointerlockchange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onpointerlockerror",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onpointermove",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onpointerout",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onpointerover",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onpointerrawupdate",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onpointerup",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onprerenderingchange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onprogress",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onratechange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onreadystatechange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onreset",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onresize",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onresume",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onscroll",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onscrollend",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onsearch",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onsecuritypolicyviolation",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onseeked",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onseeking",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onselect",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onselectionchange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onselectstart",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onslotchange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onstalled",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onsubmit",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onsuspend",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ontimeupdate",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ontoggle",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ontransitioncancel",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ontransitionend",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ontransitionrun",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ontransitionstart",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onvisibilitychange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onvolumechange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onwaiting",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onwebkitanimationend",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onwebkitanimationiteration",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onwebkitanimationstart",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onwebkitfullscreenchange",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onwebkitfullscreenerror",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onwebkittransitionend",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "onwheel",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "open",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "ownerDocument",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "parentElement",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "parentNode",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "pictureInPictureElement",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "pictureInPictureEnabled",
            "documentation": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "plugins",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "pointerLockElement",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "prepend",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "prerendering",
            "documentation": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "previousSibling",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "queryCommandEnabled",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "queryCommandIndeterm",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "queryCommandState",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "queryCommandSupported",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "queryCommandValue",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "querySelector",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "querySelectorAll",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "readyState",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "referrer",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "releaseEvents",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "removeChild",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "removeEventListener",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "replaceChild",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "replaceChildren",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "rootElement",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "scripts",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "scrollingElement",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "startViewTransition",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "styleSheets",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "textContent",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "timeline",
            "documentation": "proxy for a javascript object",
            "type": [],
            "version": 0
        },
        {
            "acResult": "title",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "visibilityState",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "vlinkColor",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "wasDiscarded",
            "documentation": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "webkitCancelFullScreen",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "webkitCurrentFullScreenElement",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "webkitExitFullscreen",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "webkitFullscreenElement",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "webkitFullscreenEnabled",
            "documentation": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "webkitHidden",
            "documentation": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "webkitIsFullScreen",
            "documentation": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "webkitVisibilityState",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "write",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "writeln",
            "documentation": "proxy for a javascript object",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "xmlEncoding",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "xmlStandalone",
            "documentation": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "xmlVersion",
            "documentation": "",
            "type": [],
            "version": 0
        }
    ],
    "image": [
        {
            "acResult": "EmptyImage",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "Image",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "ImageWin",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "Pixel",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": [],
            "version": 0
        }
    ],
    "itertools": [
        {
            "acResult": "__doc__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Meta path import for built-in modules.\n\nAll methods are either class or static methods to avoid the need to\ninstantiate the class.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "_grouper",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "accumulate",
            "documentation": "accumulate(iterable[, func, initial]) --> accumulate object\n\nReturn series of accumulated sums (or other binary function results).",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable",
                    "hide": true
                },
                {
                    "name": "func",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "chain",
            "documentation": "chain(*iterables) --> chain object\n\nReturn a chain object whose .__next__() method returns elements from the\nfirst iterable until it is exhausted, then elements from the next\niterable, until all of the iterables are exhausted.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "combinations",
            "documentation": "combinations(iterable, r) --> combinations object\n\nReturn successive r-length combinations of elements in the iterable.\n\ncombinations(range(4), 3) --> (0,1,2), (0,1,3), (0,2,3), (1,2,3)",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable",
                    "hide": true
                },
                {
                    "name": "r"
                }
            ]
        },
        {
            "acResult": "combinations_with_replacement",
            "documentation": "combinations_with_replacement(iterable, r) --> combinations_with_replacement object\n\nReturn successive r-length combinations of elements in the iterable\nallowing individual elements to have successive repeats.\ncombinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable",
                    "hide": true
                },
                {
                    "name": "r"
                }
            ]
        },
        {
            "acResult": "compress",
            "documentation": "compress(data, selectors) --> iterator over selected data\n\nReturn data elements corresponding to true selector elements.\nForms a shorter iterator from selected data elements using the\nselectors to choose the data elements.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "data",
                    "hide": true
                },
                {
                    "name": "selectors"
                }
            ]
        },
        {
            "acResult": "count",
            "documentation": "count(start=0, step=1) --> count object\n\nReturn a count object whose .__next__() method returns consecutive values.\nEquivalent to:\n\n    def count(firstval=0, step=1):\n        x = firstval\n        while 1:\n            yield x\n            x += step\n",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "start",
                    "hide": true,
                    "defaultValue": "1"
                },
                {
                    "name": "step",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "cycle",
            "documentation": "cycle(iterable) --> cycle object\n\nReturn elements from the iterable until it is exhausted.\nThen repeat the sequence indefinitely.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable",
                    "hide": true
                }
            ]
        },
        {
            "acResult": "dropwhile",
            "documentation": "dropwhile(predicate, iterable) --> dropwhile object\n\nDrop items from the iterable while predicate(item) is true.\nAfterwards, return every element until the iterable is exhausted.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "predicate",
                    "hide": true
                },
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "filterfalse",
            "documentation": "filterfalse(function or None, sequence) --> filterfalse object\n\nReturn those items of sequence for which function(item) is false.\nIf function is None, return the items that are false.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "function",
                    "hide": true
                },
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "groupby",
            "documentation": "groupby(iterable, key=None) -> make an iterator that returns consecutive\nkeys and groups from the iterable.  If the key function is not specified or\nis None, the element itself is used for grouping.\n",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable",
                    "hide": true
                },
                {
                    "name": "key",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "islice",
            "documentation": "islice(iterable, stop) --> islice object\nislice(iterable, start, stop[, step]) --> islice object\n\nReturn an iterator whose next() method returns selected values from an\niterable.  If start is specified, will skip all preceding elements;\notherwise, start defaults to zero.  Step defaults to one.  If\nspecified as another value, step determines how many values are \nskipped between successive calls.  Works like a slice() on a list\nbut returns an iterator.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "permutations",
            "documentation": "permutations(iterable[, r]) --> permutations object\n\nReturn successive r-length permutations of elements in the iterable.\n\npermutations(range(3), 2) --> (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable",
                    "hide": true
                },
                {
                    "name": "r",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "product",
            "documentation": "product(*iterables, repeat=1) --> product object\n\nCartesian product of input iterables.  Equivalent to nested for-loops.\n\nFor example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).\nThe leftmost iterators are in the outermost for-loop, so the output tuples\ncycle in a manner similar to an odometer (with the rightmost element changing\non every iteration).\n\nTo compute the product of an iterable with itself, specify the number\nof repetitions with the optional repeat keyword argument. For example,\nproduct(A, repeat=4) means the same as product(A, A, A, A).\n\nproduct('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)\nproduct((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ...",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "repeat",
            "documentation": "repeat(object [,times]) -> create an iterator which returns the object\nfor the specified number of times.  If not specified, returns the object\nendlessly.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "starmap",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "function",
                    "hide": true
                },
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "takewhile",
            "documentation": "takewhile(predicate, iterable) --> takewhile object\n\nReturn successive entries from an iterable as long as the \npredicate evaluates to true for each entry.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "predicate",
                    "hide": true
                },
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "tee",
            "documentation": "Returns a tuple of n independent iterators.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                },
                {
                    "name": "n",
                    "defaultValue": "2"
                }
            ]
        },
        {
            "acResult": "zip_longest",
            "documentation": "zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object\n\nReturn a zip_longest object whose .__next__() method returns a tuple where\nthe i-th element comes from the i-th iterable argument.  The .__next__()\nmethod continues until the longest iterable in the argument sequence\nis exhausted and then it raises StopIteration.  When the shorter iterables\nare exhausted, the fillvalue is substituted in their place.  The fillvalue\ndefaults to None or can be specified by a keyword argument.\n",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "chain.from_iterable",
            "documentation": "chain.from_iterable(iterable) --> chain object\n\nAlternate chain() constructor taking a single iterable argument\nthat evaluates lazily.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "type",
                    "hide": true
                },
                {
                    "name": "iterable"
                }
            ]
        }
    ],
    "keyword": [
        {
            "acResult": "__all__",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "iskeyword",
            "documentation": "Return key in self.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "issoftkeyword",
            "documentation": "Return key in self.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "kwlist",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "softkwlist",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": [],
            "version": 0
        }
    ],
    "math": [
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Loader for extension modules.\n\nThe constructor is designed to work with FileFinder.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "acos",
            "documentation": "Return the arc cosine (measured in radians) of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "acosh",
            "documentation": "Return the inverse hyperbolic cosine of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "asin",
            "documentation": "Return the arc sine (measured in radians) of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "asinh",
            "documentation": "Return the inverse hyperbolic sine of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "atan",
            "documentation": "Return the arc tangent (measured in radians) of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "atan2",
            "documentation": "Return the arc tangent (measured in radians) of y/x.\n\nUnlike atan(y/x), the signs of both x and y are considered.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "y"
                },
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "atanh",
            "documentation": "Return the inverse hyperbolic tangent of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "ceil",
            "documentation": "Return the ceiling of x as an Integral.\n\nThis is the smallest integer >= x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "comb",
            "documentation": "Number of ways to choose k items from n items without repetition and with order.\n\nEvaluates to n! / (n - k)! when k <= n and evaluates\nto zero when k > n.\n\nIf k is not specified or is None, then k defaults to n\nand the function returns n!.\n\nRaises TypeError if either of the arguments are not integers.\nRaises ValueError if either of the arguments are negative.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "n"
                },
                {
                    "name": "k"
                }
            ]
        },
        {
            "acResult": "copysign",
            "documentation": "Return a float with the magnitude (absolute value) of x but the sign of y.\n\nOn platforms that support signed zeros, copysign(1.0, -0.0)\nreturns -1.0.\n",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y"
                }
            ]
        },
        {
            "acResult": "cos",
            "documentation": "Return the cosine of x (measured in radians).",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "cosh",
            "documentation": "Return the hyperbolic cosine of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "degrees",
            "documentation": "Convert angle x from radians to degrees.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "e",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "erf",
            "documentation": "Error function at x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "erfc",
            "documentation": "Complementary error function at x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "exp",
            "documentation": "Return e raised to the power of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "expm1",
            "documentation": "Return exp(x)-1.\n\nThis function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "fabs",
            "documentation": "Return the absolute value of the float x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "factorial",
            "documentation": "Find x!.\n\nRaise a ValueError if x is negative or non-integral.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "floor",
            "documentation": "Return the floor of x as an Integral.\n\nThis is the largest integer <= x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "fmod",
            "documentation": "Return fmod(x, y), according to platform C.\n\nx % y may differ.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y"
                }
            ]
        },
        {
            "acResult": "frexp",
            "documentation": "Return the mantissa and exponent of x, as pair (m, e).\n\nm is a float and e is an int, such that x = m * 2.**e.\nIf x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "fsum",
            "documentation": "Return an accurate floating point sum of values in the iterable seq.\n\nAssumes IEEE-754 floating point arithmetic.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "seq"
                }
            ]
        },
        {
            "acResult": "gamma",
            "documentation": "Gamma function at x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "gcd",
            "documentation": "greatest common divisor of x and y",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "hypot",
            "documentation": "Return the Euclidean distance, sqrt(x*x + y*y).",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "inf",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "isclose",
            "documentation": "Determine whether two floating point numbers are close in value.\n\n  rel_tol\n    maximum difference for being considered \"close\", relative to the\n    magnitude of the input values\n  abs_tol\n    maximum difference for being considered \"close\", regardless of the\n    magnitude of the input values\n\nReturn True if a is close in value to b, and False otherwise.\n\nFor the values to be considered close, the difference between them\nmust be smaller than at least one of the tolerances.\n\n-inf, inf and NaN behave similarly to the IEEE 754 Standard.  That\nis, NaN is not close to anything, even itself.  inf and -inf are\nonly close to themselves.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "isfinite",
            "documentation": "Return True if x is neither an infinity nor a NaN, and False otherwise.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "isinf",
            "documentation": "Return True if x is a positive or negative infinity, and False otherwise.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "isnan",
            "documentation": "Return True if x is a NaN (not a number), and False otherwise.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "isqrt",
            "documentation": "Return the integer part of the square root of the input.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "n"
                }
            ]
        },
        {
            "acResult": "lcm",
            "documentation": "Return the least common multiple of the specified integer arguments. If all arguments are nonzero, then the returned value is the smallest positive integer that is a multiple of all arguments. If any of the arguments is zero, then the returned value is 0. lcm() without arguments returns 1.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "ldexp",
            "documentation": "Return x * (2**i).\n\nThis is essentially the inverse of frexp().",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "i"
                }
            ]
        },
        {
            "acResult": "lgamma",
            "documentation": "Natural logarithm of absolute value of Gamma function at x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "log",
            "documentation": "log(x, [base=e])\nReturn the logarithm of x to the given base.\n\nIf the base not specified, returns the natural logarithm (base e) of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "log10",
            "documentation": "Return the base 10 logarithm of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "log1p",
            "documentation": "Return the natural logarithm of 1+x (base e).\n\nThe result is computed in a way which is accurate for x near zero.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "log2",
            "documentation": "Return the base 2 logarithm of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "modf",
            "documentation": "Return the fractional and integer parts of x.\n\nBoth results carry the sign of x and are floats.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "nan",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "perm",
            "documentation": "'Number of ways to choose k items from n items without repetition and with order.\n\nEvaluates to n! / (n - k)! when k <= n and evaluates\nto zero when k > n.\n\nIf k is not specified or is None, then k defaults to n\nand the function returns n!.\n\nRaises TypeError if either of the arguments are not integers.\nRaises ValueError if either of the arguments are negative.'",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "n"
                },
                {
                    "name": "k",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "pi",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "pow",
            "documentation": "Return x**y (x to the power of y).",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y"
                }
            ]
        },
        {
            "acResult": "prod",
            "documentation": "Calculate the product of all the elements in the input iterable. The default start value for the product is 1.\n\nWhen the iterable is empty, return the start value. This function is intended specifically for use with numeric values and may reject non-numeric types.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable"
                }
            ]
        },
        {
            "acResult": "radians",
            "documentation": "Convert angle x from degrees to radians.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "remainder",
            "documentation": "Difference between x and the closest integer multiple of y.\n\nReturn x - n*y where n*y is the closest integer multiple of y.\nIn the case where x is exactly halfway between two multiples of\ny, the nearest even value of n is used. The result is always exact.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y"
                }
            ]
        },
        {
            "acResult": "sin",
            "documentation": "Return the sine of x (measured in radians).",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "sinh",
            "documentation": "Return the hyperbolic sine of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "sqrt",
            "documentation": "Return the square root of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "tan",
            "documentation": "Return the tangent of x (measured in radians).",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "tanh",
            "documentation": "Return the hyperbolic tangent of x.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "tau",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "trunc",
            "documentation": "Truncates the Real x to the nearest Integral toward 0.\n\nUses the __trunc__ magic method.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        }
    ],
    "numbers": [
        {
            "acResult": "Complex",
            "documentation": "Create a complex number from a real part and an optional imaginary part.\n\nThis is equivalent to (real + imag*1j) where imag defaults to 0.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "Integral",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "Number",
            "documentation": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "Integral.from_bytes",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        }
    ],
    "operator": [
        {
            "acResult": "__abs__",
            "documentation": "Same as abs(a).",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "__add__",
            "documentation": "Same as a + b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__all__",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__and__",
            "documentation": "Same as a & b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__concat__",
            "documentation": "Same as a + b, for a and b sequences.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__contains__",
            "documentation": "Same as b in a (note reversed operands).",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__delitem__",
            "documentation": "Same as del a[b].",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__div__",
            "documentation": "Same as a / b.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__eq__",
            "documentation": "Same as a == b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__floordiv__",
            "documentation": "Same as a // b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__ge__",
            "documentation": "Same as a >= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__getitem__",
            "documentation": "Same as a[b].",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__gt__",
            "documentation": "Same as a > b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__iadd__",
            "documentation": "Same as a += b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__iand__",
            "documentation": "Same as a &= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__iconcat__",
            "documentation": "Same as a += b, for a and b sequences.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__ifloordiv__",
            "documentation": "Same as a //= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__ilshift__",
            "documentation": "Same as a <<= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__imatmul__",
            "documentation": "Same as a @= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__imod__",
            "documentation": "Same as a %= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__imul__",
            "documentation": "Same as a *= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__index__",
            "documentation": "Same as a.__index__().",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "__inv__",
            "documentation": "Same as ~a.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "__invert__",
            "documentation": "Same as ~a.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "__ior__",
            "documentation": "Same as a |= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__ipow__",
            "documentation": "Same as a **= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__irshift__",
            "documentation": "Same as a >>= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__isub__",
            "documentation": "Same as a -= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__itruediv__",
            "documentation": "Same as a /= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__ixor__",
            "documentation": "Same as a ^= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__le__",
            "documentation": "Same as a <= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__lshift__",
            "documentation": "Same as a << b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__lt__",
            "documentation": "Same as a < b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__matmul__",
            "documentation": "Same as a @ b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__mod__",
            "documentation": "Same as a % b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__mul__",
            "documentation": "Same as a * b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__ne__",
            "documentation": "Same as a != b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__neg__",
            "documentation": "Same as -a.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "__not__",
            "documentation": "Same as not a.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "__or__",
            "documentation": "Same as a | b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__pos__",
            "documentation": "Same as +a.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "__pow__",
            "documentation": "Same as a ** b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__rshift__",
            "documentation": "Same as a >> b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__setitem__",
            "documentation": "Same as a[b] = c.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                },
                {
                    "name": "c"
                }
            ]
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__sub__",
            "documentation": "Same as a - b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__truediv__",
            "documentation": "Same as a / b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "__xor__",
            "documentation": "Same as a ^ b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "abs",
            "documentation": "Same as abs(a).",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "add",
            "documentation": "Same as a + b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "and_",
            "documentation": "Same as a & b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "attrgetter",
            "documentation": "attrgetter(attr, ...) --> attrgetter object\n\nReturn a callable object that fetches the given attribute(s) from its operand.\nAfter f = attrgetter('name'), the call f(r) returns r.name.\nAfter g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).\nAfter h = attrgetter('name.first', 'name.last'), the call h(r) returns\n(r.name.first, r.name.last).",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "concat",
            "documentation": "Same as a + b, for a and b sequences.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "contains",
            "documentation": "Same as b in a (note reversed operands).",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "countOf",
            "documentation": "Return thenumber of times b occurs in a.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "delitem",
            "documentation": "Same as del a[b].",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "div",
            "documentation": "Same as a / b.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "eq",
            "documentation": "Same as a == b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "floordiv",
            "documentation": "Same as a // b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "ge",
            "documentation": "Same as a >= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "getitem",
            "documentation": "Same as a[b].",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "gt",
            "documentation": "Same as a > b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "iadd",
            "documentation": "Same as a += b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "iand",
            "documentation": "Same as a &= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "iconcat",
            "documentation": "Same as a += b, for a and b sequences.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "ifloordiv",
            "documentation": "Same as a //= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "ilshift",
            "documentation": "Same as a <<= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "imatmul",
            "documentation": "Same as a @= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "imod",
            "documentation": "Same as a %= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "imul",
            "documentation": "Same as a *= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "index",
            "documentation": "Same as a.__index__().",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "indexOf",
            "documentation": "Return the first index of b in a",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "inv",
            "documentation": "Same as ~a.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "invert",
            "documentation": "Same as ~a.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "ior",
            "documentation": "Same as a |= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "ipow",
            "documentation": "Same as a **= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "irshift",
            "documentation": "Same as a >>= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "is_",
            "documentation": "Same as a is b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "is_not",
            "documentation": "Same as a is not b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "isub",
            "documentation": "Same as a -= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "itemgetter",
            "documentation": "Return a callable object that fetches the given item(s) from its operand.\n            After f = itemgetter(2), the call f(r) returns r[2].\n            After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "itruediv",
            "documentation": "Same as a /= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "ixor",
            "documentation": "Same as a ^= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "le",
            "documentation": "Same as a <= b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "length_hint",
            "documentation": "Return an estimate of the number of items in obj.\n\nThis is useful for presizing containers when building from an iterable.\n\nIf the object supports len(), the result will be exact.\nOtherwise, it may over- or under-estimate by an arbitrary amount.\nThe result will be an integer >= 0.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "obj"
                },
                {
                    "name": "default",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "lshift",
            "documentation": "Same as a << b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "lt",
            "documentation": "Same as a < b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "matmul",
            "documentation": "Same as a @ b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "methodcaller",
            "documentation": "methodcaller(name, ...) --> methodcaller object\n\nReturn a callable object that calls the given method on its operand.\nAfter f = methodcaller('name'), the call f(r) returns r.name().\nAfter g = methodcaller('name', 'date', foo=1), the call g(r) returns\nr.name('date', foo=1).",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "mod",
            "documentation": "Same as a % b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "mul",
            "documentation": "Same as a * b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "ne",
            "documentation": "Same as a != b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "neg",
            "documentation": "Same as -a.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "not_",
            "documentation": "Same as not a.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "or_",
            "documentation": "Same as a | b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "pos",
            "documentation": "Same as +a.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "pow",
            "documentation": "Same as a ** b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "rshift",
            "documentation": "Same as a >> b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "setitem",
            "documentation": "Same as a[b] = c.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                },
                {
                    "name": "c"
                }
            ]
        },
        {
            "acResult": "sub",
            "documentation": "Same as a - b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "truediv",
            "documentation": "Same as a / b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "truth",
            "documentation": "Return True if a is true, False otherwise.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                }
            ]
        },
        {
            "acResult": "xor",
            "documentation": "Same as a ^ b.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        }
    ],
    "platform": [
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "architecture",
            "documentation": "Queries the given executable (defaults to the Python interpreter\nbinary) for various architecture information.\n\nReturns a tuple (bits, linkage) which contains information about\nthe bit architecture and the linkage format used for the\nexecutable. Both values are returned as strings.\n\nValues that cannot be determined are returned as given by the\nparameter presets. If bits is given as '', the sizeof(pointer)\n(or sizeof(long) on Python version < 1.5.2) is used as\nindicator for the supported pointer size.\n\nThe function relies on the system's \"file\" command to do the\nactual work. This is available on most if not all Unix\nplatforms. On some non-Unix platforms where the \"file\" command\ndoes not exist and the executable is set to the Python interpreter\nbinary defaults from _default_architecture are used.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "executable",
                    "defaultValue": ""
                },
                {
                    "name": "bits",
                    "defaultValue": ""
                },
                {
                    "name": "linkage",
                    "defaultValue": "/opt/homebrew/opt/python@3.9/bin/python3.9"
                }
            ]
        },
        {
            "acResult": "machine",
            "documentation": "Returns the machine type, e.g. 'i386'\n\nAn empty string is returned if the value cannot be determined.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "node",
            "documentation": "Returns the computer's network name (which may not be fully\nqualified)\n\nAn empty string is returned if the value cannot be determined.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "processor",
            "documentation": "Returns the (true) processor name, e.g. 'amdk6'\n\nAn empty string is returned if the value cannot be\ndetermined. Note that many platforms do not provide this\ninformation or simply return the same value as for machine(),\ne.g.  NetBSD does this.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "python_implementation",
            "documentation": "Returns a string identifying the Python implementation.\n\nCurrently, the following implementations are identified:\n  'CPython' (C implementation of Python),\n  'IronPython' (.NET implementation of Python),\n  'Jython' (Java implementation of Python),\n  'PyPy' (Python implementation of Python).",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "python_version",
            "documentation": "Returns the Python version as string 'major.minor.patchlevel'\n\nNote that unlike the Python sys.version, the returned value\nwill always include the patchlevel (it defaults to 0).",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "release",
            "documentation": "Returns the system's release, e.g. '2.2.0' or 'NT'\n\nAn empty string is returned if the value cannot be determined.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "system",
            "documentation": "Returns the system/OS name, e.g. 'Linux', 'Windows' or 'Java'.\n\nAn empty string is returned if the value cannot be determined.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "version",
            "documentation": "Returns the system's release version, e.g. '#3 on degas'\n\nAn empty string is returned if the value cannot be determined.",
            "type": [
                "function"
            ],
            "version": 0
        }
    ],
    "processing": [
        {
            "acResult": "A",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "AB",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ADD",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "AG",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ALPHA",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ALPHA_MASK",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ALT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "AMBIENT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "AR",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ARC",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ARGB",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ARROW",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "B",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BACKSPACE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BASELINE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BEEN_LIT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BEVEL",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BEZIER_VERTEX",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BLEND",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BLUE_MASK",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BLUR",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BOTTOM",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BOX",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BREAK",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BURN",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CAPSLK",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CENTER",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CLOSE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CLOSESHAPE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CMYK",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CODED",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CONTROL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CORNER",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CORNERS",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CROSS",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CURVE_VERTEX",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CUSTOM",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DA",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DARKEST",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DB",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DEG_TO_RAD",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DELETE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DG",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DIAMETER",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DIFFERENCE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DILATE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DIRECTIONAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DISABLE_ACCURATE_TEXTURES",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DISABLE_DEPTH_SORT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DISABLE_DEPTH_TEST",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DISABLE_OPENGL_2X_SMOOTH",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DISABLE_OPENGL_ERROR_REPORT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DODGE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOWN",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DR",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DXF",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "EB",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "EDGE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "EG",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ELLIPSE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ENABLE_ACCURATE_TEXTURES",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ENABLE_DEPTH_SORT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ENABLE_DEPTH_TEST",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ENABLE_NATIVE_FONTS",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ENABLE_OPENGL_2X_SMOOTH",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ENABLE_OPENGL_4X_SMOOTH",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ENABLE_OPENGL_ERROR_REPORT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "END",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ENTER",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "EPSILON",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ER",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ERODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ESC",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "EXCLUSION",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "Environment",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "F1",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "F10",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "F11",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "F12",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "F2",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "F3",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "F4",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "F5",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "F6",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "F7",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "F8",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "F9",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "G",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "GEOMETRY",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "GIF",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "GRAY",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "GREEN_MASK",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "GROUP",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "HALF_PI",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "HAND",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "HARD_LIGHT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "HINT_COUNT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "HOME",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "HSB",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "IMAGE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "INSERT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "INVERT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "JAVA2D",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "JPEG",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "Keyboard",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "LEFT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "LIGHTEST",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "LINE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "LINES",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "LINUX",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MAXOSX",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MAX_FLOAT",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MAX_INT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MAX_LIGHTS",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "META",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MIN_FLOAT",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MIN_INT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MITER",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MODEL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MOVE",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MULTIPLY",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "Mouse",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "NOCURSOR",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NORMAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NORMALIZED",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NORMAL_MODE_AUTO",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NORMAL_MODE_SHAPE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NORMAL_MODE_VERTEX",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NUMLK",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NX",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NY",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NZ",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "OPAQUE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "OPEN",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "OPENGL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ORTHOGRAPHIC",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "OTHER",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "OVERLAY",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "P2D",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "P3D",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PATH",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PDF",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PERSPECTIVE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PFont",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "PGDN",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PGUP",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PGraphics",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "PI",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PImage",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "POINT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "POINTS",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "POLYGON",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "POSTERIZE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PRECISIONB",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PRECISIONF",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PREC_ALPHA_SHIFT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PREC_MAXVAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PREC_RED_SHIFT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PRIMITIVE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PROJECT",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PShapeSVG",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "PVector",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "QUAD",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "QUADS",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "QUAD_STRIP",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "QUARTER_PI",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "R",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RADIUS",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RAD_TO_DEG",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RECT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RED_MASK",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "REPLACE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RETURN",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RGB",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RIGHT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ROUND",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SA",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SB",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SCREEN",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SG",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SHAPE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SHIFT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SHINE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SINCOS_LENGTH",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SOFT_LIGHT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SPB",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SPG",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SPHERE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SPOT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SPR",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SQUARE",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SR",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SUBTRACT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SW",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "Screen",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "TAB",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TARGA",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TAU",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TEXT",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "THIRD_PI",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "THRESHOLD",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TIFF",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TOP",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TRIANGLE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TRIANGLES",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TRIANGLE_FAN",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TRIANGLE_STRIP",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TWO_PI",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TX",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TY",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TZ",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "U",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "UP",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "V",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "VERTEX",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "VERTEX_FIELD_COUNT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "VW",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "VX",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "VY",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "VZ",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "WAIT",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "WEBGL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "WHITESPACE",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "WINDOWS",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "X",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "Y",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "Z",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "alpha",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "ambient",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "ambientLight",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "applyMatrix",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "arc",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "background",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "beginCamera",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "beginShape",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "bezier",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "bezierDetail",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "bezierPoint",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "bezierTangent",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "bezierVertex",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "blend",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "blendColor",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "blue",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "box",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "brightness",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "camera",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "circle",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "color",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "colorMode",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "constrain",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "copy",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createFont",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createGraphics",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "createImage",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "cursor",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "curve",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "curveDetail",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "curvePoint",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "curveTangent",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "curveTightness",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "curveVertex",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "day",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "degrees",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "directionalLight",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "dist",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "ellipse",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "ellipseMode",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "emissive",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "endCamera",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "endShape",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "environment",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "exitp",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "fill",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "filter",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "frameRate",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "frustum",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "get",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "green",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "height",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "hint",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "hour",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "hue",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "image",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "imageMode",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "keyboard",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "lerp",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "lerpColor",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "lightFalloff",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "lightSpecular",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "lights",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "line",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "loadBytes",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "loadFont",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "loadImage",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "loadPixels",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "loadShape",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "loadStrings",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "loop",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "mag",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "map",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "millis",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "minute",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "modelX",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "modelY",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "modelZ",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "month",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "mouse",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "mouseX",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "mouseY",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "noCursor",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "noFill",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "noLights",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "noLoop",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "noSmooth",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "noStroke",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "noTint",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "noise",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "noiseDetail",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "noiseSeed",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "norm",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "normal",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "ortho",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "p",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "perspective",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "pmouseX",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "pmouseY",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "point",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "pointLight",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "popMatrix",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "printCamera",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "printMatrix",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "printProjection",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "println",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "processing",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "pushMatrix",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "quad",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "radians",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "random",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "randomSeed",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "rect",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "rectMode",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "red",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "renderMode",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "requestImage",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "resetMatrix",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "rotate",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "rotateX",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "rotateY",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "rotateZ",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "run",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "saturation",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "save",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "saveFrame",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "saveStrings",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "scale",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "screen",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "screenX",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "screenY",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "screenZ",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "second",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "set",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "shape",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "shapeMode",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "shininess",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "size",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "smooth",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "specular",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "sphere",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "sphereDetail",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "spotLight",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "sq",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "status",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "stroke",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "strokeCap",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "strokeJoin",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "strokeWeight",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "text",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "textAlign",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "textAscent",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "textDescent",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "textFont",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "textLeading",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "textMode",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "textSize",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "textWidth",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "texture",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "textureMode",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "tint",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "translate",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "triangle",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "updatePixels",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "vertex",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "width",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "year",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        }
    ],
    "random": [
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "choice",
            "documentation": "Choose a random element from a non-empty sequence.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "seq"
                }
            ]
        },
        {
            "acResult": "expovariate",
            "documentation": "Exponential distribution.\n\nlambd is 1.0 divided by the desired mean.  It should be\nnonzero.  (The parameter would be called \"lambda\", but that is\na reserved word in Python.)  Returned values range from 0 to\npositive infinity if lambd is positive, and from negative\ninfinity to 0 if lambd is negative.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "lambd"
                }
            ]
        },
        {
            "acResult": "gauss",
            "documentation": "Gaussian distribution.\n\nmu is the mean, and sigma is the standard deviation.  This is\nslightly faster than the normalvariate() function.\n\nNot thread-safe without a lock around calls.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "mu"
                },
                {
                    "name": "sigma"
                }
            ]
        },
        {
            "acResult": "lognormvariate",
            "documentation": "Log normal distribution.\n\nIf you take the natural logarithm of this distribution, you'll get a\nnormal distribution with mean mu and standard deviation sigma.\nmu can have any value, and sigma must be greater than zero.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "mu"
                },
                {
                    "name": "sigma"
                }
            ]
        },
        {
            "acResult": "normalvariate",
            "documentation": "Normal distribution.\n\nmu is the mean, and sigma is the standard deviation.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "mu"
                },
                {
                    "name": "sigma"
                }
            ]
        },
        {
            "acResult": "randint",
            "documentation": "Return random integer in range [a, b], including both end points.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        },
        {
            "acResult": "random",
            "documentation": "random() -> x in the interval [0, 1).",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                }
            ]
        },
        {
            "acResult": "randrange",
            "documentation": "Choose a random item from range(start, stop[, step]).\n\nThis fixes the problem with randint() which includes the\nendpoint; in Python this is usually not what you want.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "start"
                },
                {
                    "name": "stop",
                    "defaultValue": "1"
                },
                {
                    "name": "step",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "sample",
            "documentation": "Chooses k unique random elements from a population sequence or set.\n\nReturns a new list containing elements from the population while\nleaving the original population unchanged.  The resulting list is\nin selection order so that all sub-slices will also be valid random\nsamples.  This allows raffle winners (the sample) to be partitioned\ninto grand prize and second place winners (the subslices).\n\nMembers of the population need not be hashable or unique.  If the\npopulation contains repeats, then each occurrence is a possible\nselection in the sample.\n\nRepeated elements can be specified one at a time or with the optional\ncounts parameter.  For example:\n\n    sample(['red', 'blue'], counts=[4, 2], k=5)\n\nis equivalent to:\n\n    sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)\n\nTo choose a sample from a range of integers, use range() for the\npopulation argument.  This is especially fast and space efficient\nfor sampling from a large population:\n\n    sample(range(10000000), 60)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "population"
                },
                {
                    "name": "k"
                }
            ]
        },
        {
            "acResult": "seed",
            "documentation": "Initialize internal state from a seed.\n\nThe only supported seed types are None, int, float,\nstr, bytes, and bytearray.\n\nNone or no argument seeds from current time or from an operating\nsystem specific randomness source if available.\n\nIf *a* is an int, all bits are used.\n\nFor version 2 (the default), all of the bits are used if *a* is a str,\nbytes, or bytearray.  For version 1 (provided for reproducing random\nsequences from older versions of Python), the algorithm for str and\nbytes generates a narrower range of seeds.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "a",
                    "defaultValue": "2"
                },
                {
                    "name": "version",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "shuffle",
            "documentation": "Shuffle list x in place, and return None.\n\nOptional argument random is a 0-argument function returning a\nrandom float in [0.0, 1.0); if it is the default None, the\nstandard random.random will be used.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "x"
                },
                {
                    "name": "random",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "triangular",
            "documentation": "Triangular distribution.\n\nContinuous distribution bounded by given lower and upper limits,\nand having a given mode value in-between.\n\nhttp://en.wikipedia.org/wiki/Triangular_distribution",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "low",
                    "defaultValue": "None"
                },
                {
                    "name": "high",
                    "defaultValue": "1.0"
                },
                {
                    "name": "mode",
                    "defaultValue": "0.0"
                }
            ]
        },
        {
            "acResult": "uniform",
            "documentation": "Get a random number in the range [a, b) or [a, b] depending on rounding.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "a"
                },
                {
                    "name": "b"
                }
            ]
        }
    ],
    "re": [
        {
            "acResult": "A",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ASCII",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DEBUG",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOTALL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "I",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "IGNORECASE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "L",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "LOCALE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "M",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MULTILINE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "Match",
            "documentation": "The result of re.match() and re.search().\nMatch objects always have a boolean value of True.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "Pattern",
            "documentation": "Compiled regular expression object.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "RegexFlag",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "cls",
                    "hide": true
                },
                {
                    "name": "value"
                },
                {
                    "name": "names",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "S",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "T",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TEMPLATE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "U",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "UNICODE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "VERBOSE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "X",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__all__",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "compile",
            "documentation": "Compile a regular expression pattern, returning a Pattern object.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "pattern"
                },
                {
                    "name": "flags",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "error",
            "documentation": "Exception raised for invalid regular expressions.\n\n    Attributes:\n\n        msg: The unformatted error message\n        pattern: The regular expression pattern\n",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "msg"
                },
                {
                    "name": "pattern",
                    "defaultValue": "None"
                },
                {
                    "name": "pos",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "escape",
            "documentation": "\n    Escape special characters in a string.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "pattern"
                }
            ]
        },
        {
            "acResult": "findall",
            "documentation": "Return a list of all non-overlapping matches in the string.\n\n    If one or more capturing groups are present in the pattern, return\n    a list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n\n    Empty matches are included in the result.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "pattern"
                },
                {
                    "name": "string"
                },
                {
                    "name": "flags",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "finditer",
            "documentation": "Return an iterator over all non-overlapping matches in the\n    string.  For each match, the iterator returns a Match object.\n\n    Empty matches are included in the result.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "pattern"
                },
                {
                    "name": "string"
                },
                {
                    "name": "flags",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "fullmatch",
            "documentation": "Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "pattern"
                },
                {
                    "name": "string"
                },
                {
                    "name": "flags",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "match",
            "documentation": "Try to apply the pattern at the start of the string, returning\n    a Match object, or None if no match was found.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "pattern"
                },
                {
                    "name": "string"
                },
                {
                    "name": "flags",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "purge",
            "documentation": "Clear the regular expression caches",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "search",
            "documentation": "Scan through string looking for a match to the pattern, returning\n    a Match object, or None if no match was found.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "pattern"
                },
                {
                    "name": "string"
                },
                {
                    "name": "flags",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "split",
            "documentation": "Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.  If\n    capturing parentheses are used in pattern, then the text of all\n    groups in the pattern are also returned as part of the resulting\n    list.  If maxsplit is nonzero, at most maxsplit splits occur,\n    and the remainder of the string is returned as the final element\n    of the list.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "pattern"
                },
                {
                    "name": "string"
                },
                {
                    "name": "maxsplit",
                    "defaultValue": "0"
                },
                {
                    "name": "flags",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "sub",
            "documentation": "Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the Match object and must return\n    a replacement string to be used.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "pattern"
                },
                {
                    "name": "repl"
                },
                {
                    "name": "string"
                },
                {
                    "name": "count",
                    "defaultValue": "0"
                },
                {
                    "name": "flags",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "subn",
            "documentation": "Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the Match object and must\n    return a replacement string to be used.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "pattern"
                },
                {
                    "name": "repl"
                },
                {
                    "name": "string"
                },
                {
                    "name": "count",
                    "defaultValue": "0"
                },
                {
                    "name": "flags",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "template",
            "documentation": "Compile a template pattern, returning a Pattern object",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "pattern"
                },
                {
                    "name": "flags",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "RegexFlag.from_bytes",
            "documentation": "Return the integer represented by the given array of bytes.\n\nbytes\n  Holds the array of bytes to convert.  The argument must either\n  support the buffer protocol or be an iterable object producing bytes.\n  Bytes and bytearray are examples of built-in objects that support the\n  buffer protocol.\nbyteorder\n  The byte order used to represent the integer.  If byteorder is 'big',\n  the most significant byte is at the beginning of the byte array.  If\n  byteorder is 'little', the most significant byte is at the end of the\n  byte array.  To request the native byte order of the host system, use\n  `sys.byteorder' as the byte order value.\nsigned\n  Indicates whether two's complement is used to represent the integer.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "type",
                    "hide": true
                },
                {
                    "name": "bytes"
                },
                {
                    "name": "byteorder"
                }
            ]
        }
    ],
    "signal": [
        {
            "acResult": "CTRL_BREAK_EVENT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CTRL_C_EVENT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NSIG",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SIGABRT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SIGBREAK",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SIGFPE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SIGHUP",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SIGILL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SIGKILL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SIGNINT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SIGSEGV",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SIGTERM",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SIG_DFL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SIG_IGN",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "pause",
            "documentation": "Wait until a signal arrives.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "signal",
            "documentation": "Set the action for the given signal.\n\nThe action can be SIG_DFL, SIG_IGN, or a callable Python object.\nThe previous action is returned.  See getsignal() for possible return values.\n\n*** IMPORTANT NOTICE ***\nA signal handler function is called with two arguments:\nthe first is the signal number, the second is the interrupted stack frame.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "signalnum"
                },
                {
                    "name": "handler"
                }
            ]
        }
    ],
    "string": [
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ascii_letters",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ascii_lowercase",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ascii_uppercase",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "capitalize",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "capwords",
            "documentation": "Split the argument into words using split, capitalize each\nword using capitalize, and join the capitalized words using\njoin.  If the optional second argument sep is absent or None,\nruns of whitespace characters are replaced by a single space\nand leading and trailing whitespace are removed, otherwise\nsep is used to split and join the words.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "s"
                },
                {
                    "name": "sep",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "digits",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "hexdigits",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "join",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "letters",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "lowercase",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "octdigits",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "printable",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "punctuation",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "split",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "uppercase",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "whitespace",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        }
    ],
    "textwrap": [
        {
            "acResult": "TextWrapper",
            "documentation": "\n    Object for wrapping/filling text.  The public interface consists of\n    the wrap() and fill() methods; the other methods are just there for\n    subclasses to override in order to tweak the default behaviour.\n    If you want to completely replace the main wrapping algorithm,\n    you'll probably have to override _wrap_chunks().\n    Several instance attributes control various aspects of wrapping:\n      width (default: 70)\n        the maximum width of wrapped lines (unless break_long_words\n        is false)\n      initial_indent (default: \"\")\n        string that will be prepended to the first line of wrapped\n        output.  Counts towards the line's width.\n      subsequent_indent (default: \"\")\n        string that will be prepended to all lines save the first\n        of wrapped output; also counts towards each line's width.\n      expand_tabs (default: true)\n        Expand tabs in input text to spaces before further processing.\n        Each tab will become 0 .. 'tabsize' spaces, depending on its position\n        in its line.  If false, each tab is treated as a single character.\n      tabsize (default: 8)\n        Expand tabs in input text to 0 .. 'tabsize' spaces, unless\n        'expand_tabs' is false.\n      replace_whitespace (default: true)\n        Replace all whitespace characters in the input text by spaces\n        after tab expansion.  Note that if expand_tabs is false and\n        replace_whitespace is true, every tab will be converted to a\n        single space!\n      fix_sentence_endings (default: false)\n        Ensure that sentence-ending punctuation is always followed\n        by two spaces.  Off by default because the algorithm is\n        (unavoidably) imperfect.\n      break_long_words (default: true)\n        Break words longer than 'width'.  If false, those words will not\n        be broken, and some lines might be longer than 'width'.\n      break_on_hyphens (default: true)\n        Allow breaking hyphenated words. If true, wrapping will occur\n        preferably on whitespaces and right after hyphens part of\n        compound words.\n      drop_whitespace (default: true)\n        Drop leading and trailing whitespace from lines.\n      max_lines (default: None)\n        Truncate wrapped lines.\n      placeholder (default: ' [...]')\n        Append to the last line of truncated text.\n    ",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "width",
                    "defaultValue": "8"
                },
                {
                    "name": "initial_indent",
                    "defaultValue": "True"
                },
                {
                    "name": "subsequent_indent",
                    "defaultValue": "True"
                },
                {
                    "name": "expand_tabs",
                    "defaultValue": "True"
                },
                {
                    "name": "replace_whitespace",
                    "defaultValue": "False"
                },
                {
                    "name": "fix_sentence_endings",
                    "defaultValue": "True"
                },
                {
                    "name": "break_long_words",
                    "defaultValue": "True"
                },
                {
                    "name": "drop_whitespace",
                    "defaultValue": ""
                },
                {
                    "name": "break_on_hyphens",
                    "defaultValue": ""
                },
                {
                    "name": "tabsize",
                    "defaultValue": "70"
                }
            ]
        },
        {
            "acResult": "__all__",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "_whitespace",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "dedent",
            "documentation": "Remove any common leading whitespace from every line in `text`.\n    This can be used to make triple-quoted strings line up with the left\n    edge of the display, while still presenting them in the source code\n    in indented form.\n    Note that tabs and spaces are both treated as whitespace, but they\n    are not equal: the lines \"  hello\" and \"\\thello\" are\n    considered to have no common leading whitespace.\n    Entirely blank lines are normalized to a newline character.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "text"
                }
            ]
        },
        {
            "acResult": "fill",
            "documentation": "Fill a single paragraph of text, returning a new string.\n    Reformat the single paragraph in 'text' to fit in lines of no more\n    than 'width' columns, and return a new string containing the entire\n    wrapped paragraph.  As with wrap(), tabs are expanded and other\n    whitespace characters converted to space.  See TextWrapper class for\n    available keyword args to customize wrapping behaviour.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "text"
                },
                {
                    "name": "width",
                    "defaultValue": "70"
                }
            ]
        },
        {
            "acResult": "indent",
            "documentation": "Adds 'prefix' to the beginning of selected lines in 'text'.\n    If 'predicate' is provided, 'prefix' will only be added to the lines\n    where 'predicate(line)' is True. If 'predicate' is not provided,\n    it will default to adding 'prefix' to all non-empty lines that do not\n    consist solely of whitespace characters.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "text"
                },
                {
                    "name": "prefix"
                },
                {
                    "name": "predicate",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "re",
            "documentation": "Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string 'last'.\n\nThe special characters are:\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?aiLmsux) The letters set the corresponding flags defined below.\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\n    (?!...)  Matches if ... doesn't match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode digits.\n    \\D       Matches any non-digit character; equivalent to [^\\d].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode whitespace characters.\n    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]\n             in bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the\n             range of Unicode alphanumeric characters (letters plus digits\n             plus underscore).\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match     Match a regular expression pattern to the beginning of a string.\n    fullmatch Match a regular expression pattern to all of a string.\n    search    Search a string for the presence of a pattern.\n    sub       Substitute occurrences of a pattern found in a string.\n    subn      Same as sub, but also return the number of substitutions made.\n    split     Split a string by the occurrences of a pattern.\n    findall   Find all occurrences of a pattern in a string.\n    finditer  Return an iterator yielding a Match object for each match.\n    compile   Compile a pattern into a Pattern object.\n    purge     Clear the regular expression cache.\n    escape    Backslash all non-alphanumerics in a string.\n\nEach function other than purge and escape can take an optional 'flags' argument\nconsisting of one or more of the following module constants, joined by \"|\".\nA, L, and U are mutually exclusive.\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n                   match the corresponding ASCII character categories\n                   (rather than the whole Unicode categories, which is the\n                   default).\n                   For bytes patterns, this flag is the only available\n                   behaviour and needn't be specified.\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\n                   is the default), and forbidden for bytes patterns.\n\nThis module also defines an exception 'error'.",
            "type": [
                "module"
            ],
            "version": 0
        },
        {
            "acResult": "shorten",
            "documentation": "Collapse and truncate the given text to fit in the given width.\n    The text first has its whitespace collapsed.  If it then fits in\n    the *width*, it is returned as is.  Otherwise, as many words\n    as possible are joined and then the placeholder is appended::\n        >>> textwrap.shorten(\"Hello  world!\", width=12)\n        'Hello world!'\n        >>> textwrap.shorten(\"Hello  world!\", width=11)\n        'Hello [...]'\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "text"
                },
                {
                    "name": "width"
                }
            ]
        },
        {
            "acResult": "string",
            "documentation": "",
            "type": [
                "module"
            ],
            "version": 0
        },
        {
            "acResult": "wrap",
            "documentation": "Wrap a single paragraph of text, returning a list of wrapped lines.\n    Reformat the single paragraph in 'text' so it fits in lines of no\n    more than 'width' columns, and return a list of wrapped lines.  By\n    default, tabs in 'text' are expanded with string.expandtabs(), and\n    all other whitespace characters (including newline) are converted to\n    space.  See TextWrapper class for available keyword args to customize\n    wrapping behaviour.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "text"
                },
                {
                    "name": "width",
                    "defaultValue": "70"
                }
            ]
        }
    ],
    "time": [
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Meta path import for built-in modules.\n\nAll methods are either class or static methods to avoid the need to\ninstantiate the class.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "accept2dyear",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "altzone",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "asctime",
            "documentation": "Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.\nWhen the time tuple is not present, current time as returned by localtime()\nis used.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "clock",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "ctime",
            "documentation": "Convert a time in seconds since the Epoch to a string in local time.\nThis is equivalent to asctime(localtime(seconds)). When the time tuple is\nnot present, current time as returned by localtime() is used.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "daylight",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "gmtime",
            "documentation": "Convert seconds since the Epoch to a time tuple expressing UTC (a.k.a.\nGMT).  When 'seconds' is not passed in, convert the current time instead.\n\nIf the platform supports the tm_gmtoff and tm_zone, they are available as\nattributes only.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "localtime",
            "documentation": "Convert seconds since the Epoch to a time tuple expressing local time.\nWhen 'seconds' is not passed in, convert the current time instead.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "mktime",
            "documentation": "Convert a time tuple in local time to seconds since the Epoch.\nNote that mktime(gmtime(0)) will not generally return zero for most\ntime zones; instead the returned value will either be equal to that\nof the timezone or altzone attributes on the time module.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "sleep",
            "documentation": "Delay execution for a given number of seconds.  The argument may be\na floating point number for subsecond precision.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "strftime",
            "documentation": "Convert a time tuple to a string according to a format specification.\nSee the library reference manual for formatting codes. When the time tuple\nis not present, current time as returned by localtime() is used.\n\nCommonly used format codes:\n\n%Y  Year with century as a decimal number.\n%m  Month as a decimal number [01,12].\n%d  Day of the month as a decimal number [01,31].\n%H  Hour (24-hour clock) as a decimal number [00,23].\n%M  Minute as a decimal number [00,59].\n%S  Second as a decimal number [00,61].\n%z  Time zone offset from UTC.\n%a  Locale's abbreviated weekday name.\n%A  Locale's full weekday name.\n%b  Locale's abbreviated month name.\n%B  Locale's full month name.\n%c  Locale's appropriate date and time representation.\n%I  Hour (12-hour clock) as a decimal number [01,12].\n%p  Locale's equivalent of either AM or PM.\n\nOther codes may be available on your platform.  See documentation for\nthe C library strftime function.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "format"
                }
            ]
        },
        {
            "acResult": "strptime",
            "documentation": "Parse a string to a time tuple according to a format specification.\nSee the library reference manual for formatting codes (same as\nstrftime()).\n\nCommonly used format codes:\n\n%Y  Year with century as a decimal number.\n%m  Month as a decimal number [01,12].\n%d  Day of the month as a decimal number [01,31].\n%H  Hour (24-hour clock) as a decimal number [00,23].\n%M  Minute as a decimal number [00,59].\n%S  Second as a decimal number [00,61].\n%z  Time zone offset from UTC.\n%a  Locale's abbreviated weekday name.\n%A  Locale's full weekday name.\n%b  Locale's abbreviated month name.\n%B  Locale's full month name.\n%c  Locale's appropriate date and time representation.\n%I  Hour (12-hour clock) as a decimal number [01,12].\n%p  Locale's equivalent of either AM or PM.\n\nOther codes may be available on your platform.  See documentation for\nthe C library strftime function.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "string"
                }
            ]
        },
        {
            "acResult": "struct_time",
            "documentation": "The time value as returned by gmtime(), localtime(), and strptime(), and\naccepted by asctime(), mktime() and strftime().  May be considered as a\nsequence of 9 integers.\n\nNote that several fields' values are not the same as those defined by\nthe C language standard for struct tm.  For example, the value of the\nfield tm_year is the actual year, not year - 1900.  See individual\nfields' descriptions for details.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "iterable",
                    "hide": true,
                    "defaultValue": "()"
                }
            ]
        },
        {
            "acResult": "time",
            "documentation": "Return the current time in seconds since the Epoch.\nFractions of a second may be present if the system clock provides them.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "timezone",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "tzname",
            "documentation": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "tzset",
            "documentation": "Initialize, or reinitialize, the local timezone to the value stored in\nos.environ['TZ']. The TZ environment variable should be specified in\nstandard Unix timezone format as documented in the tzset man page\n(eg. 'US/Eastern', 'Europe/Amsterdam'). Unknown timezones will silently\nfall back to UTC. If the TZ environment variable is not set, the local\ntimezone is set to the systems best guess of wallclock time.\nChanging the TZ environment variable without calling tzset *may* change\nthe local timezone used by methods such as localtime, but this behaviour\nshould not be relied on.",
            "type": [
                "function"
            ],
            "version": 0
        }
    ],
    "token": [
        {
            "acResult": "AMPER",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "AMPEREQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ASYNC",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "AT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ATEQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "AWAIT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CIRCUMFLEX",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "CIRCUMFLEXEQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "COLON",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "COMMA",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "COMMENT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DEDENT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOUBLESLASH",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOUBLESLASHEQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOUBLESTAR",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "DOUBLESTAREQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ELLIPSIS",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ENCODING",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ENDMARKER",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "EQEQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "EQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ERRORTOKEN",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "GREATER",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "GREATEREQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "INDENT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "ISEOF",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "ISNONTERMINAL",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "ISTERMINAL",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "LBRACE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "LEFTSHIFT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "LEFTSHIFTEQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "LESS",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "LESSEQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "LPAR",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "LSQB",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MINEQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "MINUS",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NAME",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NEWLINE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NOTEQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NT_OFFSET",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "NUMBER",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "N_TOKENS",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "OP",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PERCENT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PERCENTEQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PLUS",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "PLUSEQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RARROW",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RBRACE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RIGHTSHIFT",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RIGHTSHIFTEQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RPAR",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "RSQB",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SEMI",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SLASH",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "SLASHEQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "STAR",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "STAREQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "STRING",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TILDE",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "VBAR",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "VBAREQUAL",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "tok_name",
            "documentation": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
            "type": [],
            "version": 0
        }
    ],
    "tokenize": [
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "tokenize",
            "documentation": "The tokenize() generator requires one argument, readline, which\nmust be a callable object which provides the same interface as the\nreadline() method of built-in file objects.  Each call to the function\nshould return one line of input as bytes.  Alternatively, readline\ncan be a callable function terminating with StopIteration:\n    readline = open(myfile, 'rb').__next__  # Example of alternate readline\n\nThe generator produces 5-tuples with these members: the token type; the\ntoken string; a 2-tuple (srow, scol) of ints specifying the row and\ncolumn where the token begins in the source; a 2-tuple (erow, ecol) of\nints specifying the row and column where the token ends in the source;\nand the line on which the token was found.  The line passed is the\nphysical line.\n\nThe first token sequence will always be an ENCODING token\nwhich tells you which encoding was used to decode the bytes stream.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "readline"
                }
            ]
        }
    ],
    "types": [
        {
            "acResult": "BooleanType",
            "documentation": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "BufferType",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BuiltinFunctionType",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "BuiltinMethodType",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "ClassMethodDescriptorType",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "ClassType",
            "documentation": "type(object_or_name, bases, dict)\ntype(object) -> the object's type\ntype(name, bases, dict) -> a new type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "ComplexType",
            "documentation": "Create a complex number from a real part and an optional imaginary part.\n\nThis is equivalent to (real + imag*1j) where imag defaults to 0.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "DictType",
            "documentation": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "DictionaryType",
            "documentation": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "EllipsisType",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "FileType",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "FloatType",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "FunctionType",
            "documentation": "Create a function object.\n\ncode\n  a code object\nglobals\n  the globals dictionary\nname\n  a string that overrides the name from the code object\nargdefs\n  a tuple that specifies the default argument values\nclosure\n  a tuple that supplies the bindings for free variables",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "code",
                    "hide": true
                },
                {
                    "name": "globals"
                },
                {
                    "name": "name",
                    "defaultValue": "None"
                },
                {
                    "name": "argdefs",
                    "defaultValue": "None"
                },
                {
                    "name": "closure",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "GeneratorType",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "GenericAlias",
            "documentation": "Represent a PEP 585 generic type\n\nE.g. for t = list[int], t.origin is list and t.args is (int,).",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "InstanceType",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "IntType",
            "documentation": "int(x=0) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "LambdaType",
            "documentation": "Create a function object.\n\ncode\n  a code object\nglobals\n  the globals dictionary\nname\n  a string that overrides the name from the code object\nargdefs\n  a tuple that specifies the default argument values\nclosure\n  a tuple that supplies the bindings for free variables",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "code",
                    "hide": true
                },
                {
                    "name": "globals"
                },
                {
                    "name": "name",
                    "defaultValue": "None"
                },
                {
                    "name": "argdefs",
                    "defaultValue": "None"
                },
                {
                    "name": "closure",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "ListType",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "MappingProxyType",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "MethodDescriptorType",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "MethodType",
            "documentation": "Create a bound instance method object.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "MethodWrapperType",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "ModuleType",
            "documentation": "Create a module object.\n\nThe name must be a string; the optional doc argument can have any type.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "name",
                    "hide": true
                },
                {
                    "name": "doc",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "NoneType",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "NotImplementedType",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "ObjectType",
            "documentation": "The most base type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "SliceType",
            "documentation": "slice(stop)\nslice(start, stop[, step])\n\nCreate a slice object.  This is used for extended slicing (e.g. a[0:10:2]).",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "StringType",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "StringTypes",
            "documentation": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "TupleType",
            "documentation": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "TypeType",
            "documentation": "type(object_or_name, bases, dict)\ntype(object) -> the object's type\ntype(name, bases, dict) -> a new type",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "UnboundMethodType",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "WrapperDescriptorType",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "__all__",
            "documentation": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "BooleanType.from_bytes",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "DictType.fromkeys",
            "documentation": "Create a new dictionary with keys from iterable and values set to value.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "DictionaryType.fromkeys",
            "documentation": "Create a new dictionary with keys from iterable and values set to value.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "IntType.from_bytes",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        }
    ],
    "webbrowser": [
        {
            "acResult": "DefaultBrowser",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "get",
            "documentation": "Return a browser launcher instance appropriate for the environment.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "using",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "open",
            "documentation": "Display url using the default browser.\n\nIf possible, open url in a location determined by new.\n- 0: the same browser window (the default).\n- 1: a new browser window.\n- 2: a new browser page (\"tab\").\nIf possible, autoraise raises the window (the default) or not.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "url"
                },
                {
                    "name": "new",
                    "defaultValue": "True"
                },
                {
                    "name": "autoraise",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "open_new",
            "documentation": "Open url in a new window of the default browser.\n\nIf not possible, then open url in the only browser window.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "url"
                }
            ]
        },
        {
            "acResult": "open_new_tab",
            "documentation": "Open url in a new page (\"tab\") of the default browser.\n\nIf not possible, then the behavior becomes equivalent to open_new().",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "url"
                }
            ]
        }
    ],
    "turtle": [
        {
            "acResult": "Screen",
            "documentation": "Return the singleton screen object.\nIf none exists at the moment, create a new one and return it,\nelse return the existing one.",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "Turtle",
            "documentation": "RawTurtle auto-creating (scrolled) canvas.\n\nWhen a Turtle object is created or a function derived from some\nTurtle method is called a TurtleScreen object is automatically created.",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "shape",
                    "defaultValue": "True"
                },
                {
                    "name": "undobuffersize",
                    "defaultValue": "1000"
                },
                {
                    "name": "visible",
                    "defaultValue": "classic"
                }
            ]
        },
        {
            "acResult": "__doc__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "back",
            "documentation": "Move the turtle backward by distance.\n\nAliases: back | backward | bk\n\nArgument:\ndistance -- a number\n\nMove the turtle backward by distance, opposite to the direction the\nturtle is headed. Do not change the turtle's heading.\n\nExample:\n>>> position()\n(0.00, 0.00)\n>>> backward(30)\n>>> position()\n(-30.00, 0.00)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "distance"
                }
            ]
        },
        {
            "acResult": "backward",
            "documentation": "Move the turtle backward by distance.\n\nAliases: back | backward | bk\n\nArgument:\ndistance -- a number\n\nMove the turtle backward by distance, opposite to the direction the\nturtle is headed. Do not change the turtle's heading.\n\nExample:\n>>> position()\n(0.00, 0.00)\n>>> backward(30)\n>>> position()\n(-30.00, 0.00)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "distance"
                }
            ]
        },
        {
            "acResult": "begin_fill",
            "documentation": "Called just before drawing a shape to be filled.\n\nNo argument.\n\nExample:\n>>> color(\"black\", \"red\")\n>>> begin_fill()\n>>> circle(60)\n>>> end_fill()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "bgcolor",
            "documentation": "Set or return backgroundcolor of the TurtleScreen.\n\nArguments (if given): a color string or three numbers\nin the range 0..colormode or a 3-tuple of such numbers.\n\nExample:\n>>> bgcolor(\"orange\")\n>>> bgcolor()\n'orange'\n>>> bgcolor(0.5,0,0.5)\n>>> bgcolor()\n'#800080'",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "bgpic",
            "documentation": "Set background image or return name of current backgroundimage.\n\nOptional argument:\npicname -- a string, name of a gif-file or \"nopic\".\n\nIf picname is a filename, set the corresponding image as background.\nIf picname is \"nopic\", delete backgroundimage, if present.\nIf picname is None, return the filename of the current backgroundimage.\n\nExample:\n>>> bgpic()\n'nopic'\n>>> bgpic(\"landscape.gif\")\n>>> bgpic()\n'landscape.gif'",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "picname",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "bk",
            "documentation": "Move the turtle backward by distance.\n\nAliases: back | backward | bk\n\nArgument:\ndistance -- a number\n\nMove the turtle backward by distance, opposite to the direction the\nturtle is headed. Do not change the turtle's heading.\n\nExample:\n>>> position()\n(0.00, 0.00)\n>>> backward(30)\n>>> position()\n(-30.00, 0.00)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "distance"
                }
            ]
        },
        {
            "acResult": "bye",
            "documentation": "Shut the turtlegraphics window.\n\nExample:\n>>> bye()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "circle",
            "documentation": "Draw a circle with given radius.\n\nArguments:\nradius -- a number\nextent (optional) -- a number\nsteps (optional) -- an integer\n\nDraw a circle with given radius. The center is radius units left\nof the turtle; extent - an angle - determines which part of the\ncircle is drawn. If extent is not given, draw the entire circle.\nIf extent is not a full circle, one endpoint of the arc is the\ncurrent pen position. Draw the arc in counterclockwise direction\nif radius is positive, otherwise in clockwise direction. Finally\nthe direction of the turtle is changed by the amount of extent.\n\nAs the circle is approximated by an inscribed regular polygon,\nsteps determines the number of steps to use. If not given,\nit will be calculated automatically. Maybe used to draw regular\npolygons.\n\ncall: circle(radius)                  # full circle\n--or: circle(radius, extent)          # arc\n--or: circle(radius, extent, steps)\n--or: circle(radius, steps=6)         # 6-sided polygon\n\nExample:\n>>> circle(50)\n>>> circle(120, 180)  # semicircle",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "radius"
                },
                {
                    "name": "extent",
                    "defaultValue": "None"
                },
                {
                    "name": "steps",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "clear",
            "documentation": "Delete the turtle's drawings from the screen. Do not move \n\nNo arguments.\n\nDelete the turtle's drawings from the screen. Do not move \nState and position of the turtle as well as drawings of other\nturtles are not affected.\n\nExamples:\n>>> clear()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "clearscreen",
            "documentation": "Delete all drawings and all turtles from the TurtleScreen.\n\nNo argument.\n\nReset empty TurtleScreen to its initial state: white background,\nno backgroundimage, no eventbindings and tracing on.\n\nExample:\n>>> clear()\n\nNote: this method is not available as function.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "clone",
            "documentation": "Create and return a clone of the \n\nNo argument.\n\nCreate and return a clone of the turtle with same position, heading\nand turtle properties.\n\nExample (for a Turtle instance named mick):\nmick = Turtle()\njoe = mick.clone()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "color",
            "documentation": "Return or set the pencolor and fillcolor.\n\nArguments:\nSeveral input formats are allowed.\nThey use 0, 1, 2, or 3 arguments as follows:\n\ncolor()\n    Return the current pencolor and the current fillcolor\n    as a pair of color specification strings as are returned\n    by pencolor and fillcolor.\ncolor(colorstring), color((r,g,b)), color(r,g,b)\n    inputs as in pencolor, set both, fillcolor and pencolor,\n    to the given value.\ncolor(colorstring1, colorstring2),\ncolor((r1,g1,b1), (r2,g2,b2))\n    equivalent to pencolor(colorstring1) and fillcolor(colorstring2)\n    and analogously, if the other input format is used.\n\nIf turtleshape is a polygon, outline and interior of that polygon\nis drawn with the newly set colors.\nFor more info see: pencolor, fillcolor\n\nExample:\n>>> color('red', 'green')\n>>> color()\n('red', 'green')\n>>> colormode(255)\n>>> color((40, 80, 120), (160, 200, 240))\n>>> color()\n('#285078', '#a0c8f0')",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "degrees",
            "documentation": "Set angle measurement units to degrees.\n\nOptional argument:\nfullcircle -  a number\n\nSet angle measurement units, i. e. set number\nof 'degrees' for a full circle. Default value is\n360 degrees.\n\nExample:\n>>> left(90)\n>>> heading()\n90\n\nChange angle measurement unit to grad (also known as gon,\ngrade, or gradian and equals 1/100-th of the right angle.)\n>>> degrees(400.0)\n>>> heading()\n100",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "fullcircle",
                    "defaultValue": "360.0"
                }
            ]
        },
        {
            "acResult": "delay",
            "documentation": "Return or set the drawing delay in milliseconds.\n\nOptional argument:\ndelay -- positive integer\n\nExample:\n>>> delay(15)\n>>> delay()\n15",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "delay",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "distance",
            "documentation": "Return the distance from the turtle to (x,y) in turtle step units.\n\nArguments:\nx -- a number   or  a pair/vector of numbers   or   a turtle instance\ny -- a number       None                            None\n\ncall: distance(x, y)         # two coordinates\n--or: distance((x, y))       # a pair (tuple) of coordinates\n--or: distance(vec)          # e.g. as returned by pos()\n--or: distance(mypen)        # where mypen is another turtle\n\nExample:\n>>> pos()\n(0.00, 0.00)\n>>> distance(30,40)\n50.0\n>>> pen = Turtle()\n>>> pen.forward(77)\n>>> distance(pen)\n77.0",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "done",
            "documentation": "Starts event loop - calling Tkinter's mainloop function.\n\nNo argument.\n\nMust be last statement in a turtle graphics program.\nMust NOT be used if a script is run from within IDLE in -n mode\n(No subprocess) - for interactive use of turtle graphics.\n\nExample:\n>>> mainloop()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "dot",
            "documentation": "Draw a dot with diameter size, using color.\n\nOptional arguments:\nsize -- an integer >= 1 (if given)\ncolor -- a colorstring or a numeric color tuple\n\nDraw a circular dot with diameter size, using color.\nIf size is not given, the maximum of pensize+4 and 2*pensize is used.\n\nExample:\n>>> dot()\n>>> fd(50); dot(20, \"blue\"); fd(50)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "size",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "down",
            "documentation": "Pull the pen down -- drawing when moving.\n\nAliases: pendown | pd | down\n\nNo argument.\n\nExample:\n>>> pendown()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "end_fill",
            "documentation": "Fill the shape drawn after the call begin_fill().\n\nNo argument.\n\nExample:\n>>> color(\"black\", \"red\")\n>>> begin_fill()\n>>> circle(60)\n>>> end_fill()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "exitonclick",
            "documentation": "Go into mainloop until the mouse is clicked.\n\nNo arguments.\n\nBind bye() method to mouseclick on TurtleScreen.\nIf \"using_IDLE\" - value in configuration dictionary is False\n(default value), enter mainloop.\nIf IDLE with -n switch (no subprocess) is used, this value should be\nset to True in turtle.cfg. In this case IDLE's mainloop\nis active also for the client script.\n\nThis is a method of the Screen-class and not available for\nTurtleScreen instances.\n\nExample:\n>>> exitonclick()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "fd",
            "documentation": "Move the turtle forward by the specified distance.\n\nAliases: forward | fd\n\nArgument:\ndistance -- a number (integer or float)\n\nMove the turtle forward by the specified distance, in the direction\nthe turtle is headed.\n\nExample:\n>>> position()\n(0.00, 0.00)\n>>> forward(25)\n>>> position()\n(25.00,0.00)\n>>> forward(-75)\n>>> position()\n(-50.00,0.00)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "distance"
                }
            ]
        },
        {
            "acResult": "fill",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "fillcolor",
            "documentation": "Return or set the fillcolor.\n\nArguments:\nFour input formats are allowed:\n  - fillcolor()\n    Return the current fillcolor as color specification string,\n    possibly in hex-number format (see example).\n    May be used as input to another color/pencolor/fillcolor call.\n  - fillcolor(colorstring)\n    s is a Tk color specification string, such as \"red\" or \"yellow\"\n  - fillcolor((r, g, b))\n    *a tuple* of r, g, and b, which represent, an RGB color,\n    and each of r, g, and b are in the range 0..colormode,\n    where colormode is either 1.0 or 255\n  - fillcolor(r, g, b)\n    r, g, and b represent an RGB color, and each of r, g, and b\n    are in the range 0..colormode\n\nIf turtleshape is a polygon, the interior of that polygon is drawn\nwith the newly set fillcolor.\n\nExample:\n>>> fillcolor('violet')\n>>> col = pencolor()\n>>> fillcolor(col)\n>>> fillcolor(0, .5, 0)",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "forward",
            "documentation": "Move the turtle forward by the specified distance.\n\nAliases: forward | fd\n\nArgument:\ndistance -- a number (integer or float)\n\nMove the turtle forward by the specified distance, in the direction\nthe turtle is headed.\n\nExample:\n>>> position()\n(0.00, 0.00)\n>>> forward(25)\n>>> position()\n(25.00,0.00)\n>>> forward(-75)\n>>> position()\n(-50.00,0.00)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "distance"
                }
            ]
        },
        {
            "acResult": "getpen",
            "documentation": "Return the Turtleobject itself.\n\nNo argument.\n\nOnly reasonable use: as a function to return the 'anonymous turtle':\n\nExample:\n>>> pet = getturtle()\n>>> pet.fd(50)\n>>> pet\n<Turtle object at 0x0187D810>\n>>> turtles()\n[<Turtle object at 0x0187D810>]",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getscreen",
            "documentation": "Return the TurtleScreen object, the turtle is drawing  on.\n\nNo argument.\n\nReturn the TurtleScreen object, the turtle is drawing  on.\nSo TurtleScreen-methods can be called for that object.\n\nExample:\n>>> ts = getscreen()\n>>> ts\n<TurtleScreen object at 0x0106B770>\n>>> ts.bgcolor(\"pink\")",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getturtle",
            "documentation": "Return the Turtleobject itself.\n\nNo argument.\n\nOnly reasonable use: as a function to return the 'anonymous turtle':\n\nExample:\n>>> pet = getturtle()\n>>> pet.fd(50)\n>>> pet\n<Turtle object at 0x0187D810>\n>>> turtles()\n[<Turtle object at 0x0187D810>]",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "goto",
            "documentation": "Move turtle to an absolute position.\n\nAliases: setpos | setposition | goto:\n\nArguments:\nx -- a number      or     a pair/vector of numbers\ny -- a number             None\n\ncall: goto(x, y)         # two coordinates\n--or: goto((x, y))       # a pair (tuple) of coordinates\n--or: goto(vec)          # e.g. as returned by pos()\n\nMove turtle to an absolute position. If the pen is down,\na line will be drawn. The turtle's orientation does not change.\n\nExample:\n>>> tp = pos()\n>>> tp\n(0.00, 0.00)\n>>> setpos(60,30)\n>>> pos()\n(60.00,30.00)\n>>> setpos((20,80))\n>>> pos()\n(20.00,80.00)\n>>> setpos(tp)\n>>> pos()\n(0.00,0.00)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "heading",
            "documentation": "Return the turtle's current heading.\n\nNo arguments.\n\nExample:\n>>> left(67)\n>>> heading()\n67.0",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "hideturtle",
            "documentation": "Makes the turtle invisible.\n\nAliases: hideturtle | ht\n\nNo argument.\n\nIt's a good idea to do this while you're in the\nmiddle of a complicated drawing, because hiding\nthe turtle speeds up the drawing observably.\n\nExample:\n>>> hideturtle()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "home",
            "documentation": "Move turtle to the origin - coordinates (0,0).\n\nNo arguments.\n\nMove turtle to the origin - coordinates (0,0) and set its\nheading to its start-orientation (which depends on mode).\n\nExample:\n>>> home()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "ht",
            "documentation": "Makes the turtle invisible.\n\nAliases: hideturtle | ht\n\nNo argument.\n\nIt's a good idea to do this while you're in the\nmiddle of a complicated drawing, because hiding\nthe turtle speeds up the drawing observably.\n\nExample:\n>>> hideturtle()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "isdown",
            "documentation": "Return True if pen is down, False if it's up.\n\nNo argument.\n\nExample:\n>>> penup()\n>>> isdown()\nFalse\n>>> pendown()\n>>> isdown()\nTrue",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "isvisible",
            "documentation": "Return True if the Turtle is shown, False if it's hidden.\n\nNo argument.\n\nExample:\n>>> hideturtle()\n>>> print isvisible():\nFalse",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "left",
            "documentation": "Turn turtle left by angle units.\n\nAliases: left | lt\n\nArgument:\nangle -- a number (integer or float)\n\nTurn turtle left by angle units. (Units are by default degrees,\nbut can be set via the degrees() and radians() functions.)\nAngle orientation depends on mode. (See this.)\n\nExample:\n>>> heading()\n22.0\n>>> left(45)\n>>> heading()\n67.0",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "angle"
                }
            ]
        },
        {
            "acResult": "listen",
            "documentation": "Set focus on TurtleScreen (in order to collect key-events)\n\nNo arguments.\nDummy arguments are provided in order\nto be able to pass listen to the onclick method.\n\nExample:\n>>> listen()",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "xdummy",
                    "defaultValue": "None"
                },
                {
                    "name": "ydummy",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "lt",
            "documentation": "Turn turtle left by angle units.\n\nAliases: left | lt\n\nArgument:\nangle -- a number (integer or float)\n\nTurn turtle left by angle units. (Units are by default degrees,\nbut can be set via the degrees() and radians() functions.)\nAngle orientation depends on mode. (See this.)\n\nExample:\n>>> heading()\n22.0\n>>> left(45)\n>>> heading()\n67.0",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "angle"
                }
            ]
        },
        {
            "acResult": "mainloop",
            "documentation": "Starts event loop - calling Tkinter's mainloop function.\n\nNo argument.\n\nMust be last statement in a turtle graphics program.\nMust NOT be used if a script is run from within IDLE in -n mode\n(No subprocess) - for interactive use of turtle graphics.\n\nExample:\n>>> mainloop()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "onclick",
            "documentation": "Bind fun to mouse-click event on this turtle on canvas.\n\nArguments:\nfun --  a function with two arguments, to which will be assigned\n        the coordinates of the clicked point on the canvas.\nbtn --  number of the mouse-button defaults to 1 (left mouse button).\nadd --  True or False. If True, new binding will be added, otherwise\n        it will replace a former binding.\n\nExample for the anonymous turtle, i. e. the procedural way:\n\n>>> def turn(x, y):\n...     left(360)\n...\n>>> onclick(turn)  # Now clicking into the turtle will turn it.\n>>> onclick(None)  # event-binding will be removed",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "fun"
                },
                {
                    "name": "btn",
                    "defaultValue": "None"
                },
                {
                    "name": "add",
                    "defaultValue": "1"
                }
            ]
        },
        {
            "acResult": "ondrag",
            "documentation": "Bind fun to mouse-move event on this turtle on canvas.\n\nArguments:\nfun -- a function with two arguments, to which will be assigned\n       the coordinates of the clicked point on the canvas.\nbtn -- number of the mouse-button defaults to 1 (left mouse button).\n\nEvery sequence of mouse-move-events on a turtle is preceded by a\nmouse-click event on that \n\nExample:\n>>> ondrag(goto)\n\nSubsequently clicking and dragging a Turtle will move it\nacross the screen thereby producing handdrawings (if pen is\ndown).",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "fun"
                },
                {
                    "name": "btn",
                    "defaultValue": "None"
                },
                {
                    "name": "add",
                    "defaultValue": "1"
                }
            ]
        },
        {
            "acResult": "onkey",
            "documentation": "Bind fun to key-release event of key.\n\nArguments:\nfun -- a function with no arguments\nkey -- a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")\n\nIn order to be able to register key-events, TurtleScreen\nmust have focus. (See method listen.)\n\nExample:\n\n>>> def f():\n...     fd(50)\n...     lt(60)\n...\n>>> onkey(f, \"Up\")\n>>> listen()\n\nSubsequently the turtle can be moved by repeatedly pressing\nthe up-arrow key, consequently drawing a hexagon",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "fun"
                },
                {
                    "name": "key"
                }
            ]
        },
        {
            "acResult": "onrelease",
            "documentation": "Bind fun to mouse-button-release event on this turtle on canvas.\n\nArguments:\nfun -- a function with two arguments, to which will be assigned\n        the coordinates of the clicked point on the canvas.\nbtn --  number of the mouse-button defaults to 1 (left mouse button).\n\nExample (for a MyTurtle instance named joe):\n>>> class MyTurtle(Turtle):\n...     def glow(self,x,y):\n...             self.fillcolor(\"red\")\n...     def unglow(self,x,y):\n...             self.fillcolor(\"\")\n...\n>>> joe = MyTurtle()\n>>> joe.onclick(joe.glow)\n>>> joe.onrelease(joe.unglow)\n\nClicking on joe turns fillcolor red, unclicking turns it to\ntransparent.",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "fun"
                },
                {
                    "name": "btn",
                    "defaultValue": "None"
                },
                {
                    "name": "add",
                    "defaultValue": "1"
                }
            ]
        },
        {
            "acResult": "onscreenclick",
            "documentation": "Bind fun to mouse-click event on canvas.\n\nArguments:\nfun -- a function with two arguments, the coordinates of the\n       clicked point on the canvas.\nbtn -- the number of the mouse-button, defaults to 1\n\nExample (for a TurtleScreen instance named screen)\n\n>>> onclick(goto)\n>>> # Subsequently clicking into the TurtleScreen will\n>>> # make the turtle move to the clicked point.\n>>> onclick(None)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "fun"
                },
                {
                    "name": "btn",
                    "defaultValue": "None"
                },
                {
                    "name": "add",
                    "defaultValue": "1"
                }
            ]
        },
        {
            "acResult": "ontimer",
            "documentation": "Install a timer, which calls fun after t milliseconds.\n\nArguments:\nfun -- a function with no arguments.\nt -- a number >= 0\n\nExample:\n\n>>> running = True\n>>> def f():\n...     if running:\n...             fd(50)\n...             lt(60)\n...             ontimer(f, 250)\n...\n>>> f()   # makes the turtle marching around\n>>> running = False",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "fun"
                },
                {
                    "name": "t",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "pd",
            "documentation": "Pull the pen down -- drawing when moving.\n\nAliases: pendown | pd | down\n\nNo argument.\n\nExample:\n>>> pendown()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "pencolor",
            "documentation": "Return or set the pencolor.\n\nArguments:\nFour input formats are allowed:\n  - pencolor()\n    Return the current pencolor as color specification string,\n    possibly in hex-number format (see example).\n    May be used as input to another color/pencolor/fillcolor call.\n  - pencolor(colorstring)\n    s is a Tk color specification string, such as \"red\" or \"yellow\"\n  - pencolor((r, g, b))\n    *a tuple* of r, g, and b, which represent, an RGB color,\n    and each of r, g, and b are in the range 0..colormode,\n    where colormode is either 1.0 or 255\n  - pencolor(r, g, b)\n    r, g, and b represent an RGB color, and each of r, g, and b\n    are in the range 0..colormode\n\nIf turtleshape is a polygon, the outline of that polygon is drawn\nwith the newly set pencolor.\n\nExample:\n>>> pencolor('brown')\n>>> tup = (0.2, 0.8, 0.55)\n>>> pencolor(tup)\n>>> pencolor()\n'#33cc8c'",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "pendown",
            "documentation": "Pull the pen down -- drawing when moving.\n\nAliases: pendown | pd | down\n\nNo argument.\n\nExample:\n>>> pendown()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "pensize",
            "documentation": "Set or return the line thickness.\n\nAliases:  pensize | width\n\nArgument:\nwidth -- positive number\n\nSet the line thickness to width or return it. If resizemode is set\nto \"auto\" and turtleshape is a polygon, that polygon is drawn with\nthe same line thickness. If no argument is given, current pensize\nis returned.\n\nExample:\n>>> pensize()\n1\n>>> pensize(10)   # from here on lines of width 10 are drawn",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "width",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "penup",
            "documentation": "Pull the pen up -- no drawing when moving.\n\nAliases: penup | pu | up\n\nNo argument\n\nExample:\n>>> penup()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "pos",
            "documentation": "Return the turtle's current location (x,y), as a Vec2D-vector.\n\nAliases: pos | position\n\nNo arguments.\n\nExample:\n>>> pos()\n(0.00, 240.00)",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "position",
            "documentation": "Return the turtle's current location (x,y), as a Vec2D-vector.\n\nAliases: pos | position\n\nNo arguments.\n\nExample:\n>>> pos()\n(0.00, 240.00)",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "pu",
            "documentation": "Pull the pen up -- no drawing when moving.\n\nAliases: penup | pu | up\n\nNo argument\n\nExample:\n>>> penup()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "radians",
            "documentation": "Set the angle measurement units to radians.\n\nNo arguments.\n\nExample:\n>>> heading()\n90\n>>> radians()\n>>> heading()\n1.5707963267948966",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "register_shape",
            "documentation": "Adds a turtle shape to TurtleScreen's shapelist.\n\nArguments:\n(1) name is the name of a gif-file and shape is None.\n    Installs the corresponding image shape.\n    !! Image-shapes DO NOT rotate when turning the turtle,\n    !! so they do not display the heading of the turtle!\n(2) name is an arbitrary string and shape is a tuple\n    of pairs of coordinates. Installs the corresponding\n    polygon shape\n(3) name is an arbitrary string and shape is a\n    (compound) Shape object. Installs the corresponding\n    compound shape.\nTo use a shape, you have to issue the command shape(shapename).\n\ncall: register_shape(\"turtle.gif\")\n--or: register_shape(\"tri\", ((0,0), (10,10), (-10,10)))\n\nExample:\n>>> register_shape(\"triangle\", ((5,-3),(0,5),(-5,-3)))",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "name"
                },
                {
                    "name": "shape",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "reset",
            "documentation": "Delete the turtle's drawings and restore its default values.\n\nNo argument.\n\nDelete the turtle's drawings from the screen, re-center the turtle\nand set variables to the default values.\n\nExample:\n>>> position()\n(0.00,-22.00)\n>>> heading()\n100.0\n>>> reset()\n>>> position()\n(0.00,0.00)\n>>> heading()\n0.0",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "resetscreen",
            "documentation": "Reset all Turtles on the Screen to their initial state.\n\nNo argument.\n\nExample:\n>>> reset()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "right",
            "documentation": "Turn turtle right by angle units.\n\nAliases: right | rt\n\nArgument:\nangle -- a number (integer or float)\n\nTurn turtle right by angle units. (Units are by default degrees,\nbut can be set via the degrees() and radians() functions.)\nAngle orientation depends on mode. (See this.)\n\nExample:\n>>> heading()\n22.0\n>>> right(45)\n>>> heading()\n337.0",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "angle"
                }
            ]
        },
        {
            "acResult": "rt",
            "documentation": "Turn turtle right by angle units.\n\nAliases: right | rt\n\nArgument:\nangle -- a number (integer or float)\n\nTurn turtle right by angle units. (Units are by default degrees,\nbut can be set via the degrees() and radians() functions.)\nAngle orientation depends on mode. (See this.)\n\nExample:\n>>> heading()\n22.0\n>>> right(45)\n>>> heading()\n337.0",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "angle"
                }
            ]
        },
        {
            "acResult": "seth",
            "documentation": "Set the orientation of the turtle to to_angle.\n\nAliases:  setheading | seth\n\nArgument:\nto_angle -- a number (integer or float)\n\nSet the orientation of the turtle to to_angle.\nHere are some common directions in degrees:\n\n standard - mode:          logo-mode:\n-------------------|--------------------\n   0 - east                0 - north\n  90 - north              90 - east\n 180 - west              180 - south\n 270 - south             270 - west\n\nExample:\n>>> setheading(90)\n>>> heading()\n90",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "to_angle"
                }
            ]
        },
        {
            "acResult": "setheading",
            "documentation": "Set the orientation of the turtle to to_angle.\n\nAliases:  setheading | seth\n\nArgument:\nto_angle -- a number (integer or float)\n\nSet the orientation of the turtle to to_angle.\nHere are some common directions in degrees:\n\n standard - mode:          logo-mode:\n-------------------|--------------------\n   0 - east                0 - north\n  90 - north              90 - east\n 180 - west              180 - south\n 270 - south             270 - west\n\nExample:\n>>> setheading(90)\n>>> heading()\n90",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "to_angle"
                }
            ]
        },
        {
            "acResult": "setpos",
            "documentation": "Move turtle to an absolute position.\n\nAliases: setpos | setposition | goto:\n\nArguments:\nx -- a number      or     a pair/vector of numbers\ny -- a number             None\n\ncall: goto(x, y)         # two coordinates\n--or: goto((x, y))       # a pair (tuple) of coordinates\n--or: goto(vec)          # e.g. as returned by pos()\n\nMove turtle to an absolute position. If the pen is down,\na line will be drawn. The turtle's orientation does not change.\n\nExample:\n>>> tp = pos()\n>>> tp\n(0.00, 0.00)\n>>> setpos(60,30)\n>>> pos()\n(60.00,30.00)\n>>> setpos((20,80))\n>>> pos()\n(20.00,80.00)\n>>> setpos(tp)\n>>> pos()\n(0.00,0.00)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "setposition",
            "documentation": "Move turtle to an absolute position.\n\nAliases: setpos | setposition | goto:\n\nArguments:\nx -- a number      or     a pair/vector of numbers\ny -- a number             None\n\ncall: goto(x, y)         # two coordinates\n--or: goto((x, y))       # a pair (tuple) of coordinates\n--or: goto(vec)          # e.g. as returned by pos()\n\nMove turtle to an absolute position. If the pen is down,\na line will be drawn. The turtle's orientation does not change.\n\nExample:\n>>> tp = pos()\n>>> tp\n(0.00, 0.00)\n>>> setpos(60,30)\n>>> pos()\n(60.00,30.00)\n>>> setpos((20,80))\n>>> pos()\n(20.00,80.00)\n>>> setpos(tp)\n>>> pos()\n(0.00,0.00)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "setundobuffer",
            "documentation": "Set or disable undobuffer.\n\nArgument:\nsize -- an integer or None\n\nIf size is an integer an empty undobuffer of given size is installed.\nSize gives the maximum number of turtle-actions that can be undone\nby the undo() function.\nIf size is None, no undobuffer is present.\n\nExample:\n>>> setundobuffer(42)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "size"
                }
            ]
        },
        {
            "acResult": "setup",
            "documentation": "Set the size and position of the main window.\n\nArguments:\nwidth: as integer a size in pixels, as float a fraction of the \n  Default is 50% of \nheight: as integer the height in pixels, as float a fraction of the\n   Default is 75% of \nstartx: if positive, starting position in pixels from the left\n  edge of the screen, if negative from the right edge\n  Default, startx=None is to center window horizontally.\nstarty: if positive, starting position in pixels from the top\n  edge of the screen, if negative from the bottom edge\n  Default, starty=None is to center window vertically.\n\nExamples:\n>>> setup (width=200, height=200, startx=0, starty=0)\n\nsets window to 200x200 pixels, in upper left of screen\n\n>>> setup(width=.75, height=0.5, startx=None, starty=None)\n\nsets window to 75% of screen by 50% of screen and centers",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "width",
                    "defaultValue": "None"
                },
                {
                    "name": "height",
                    "defaultValue": "None"
                },
                {
                    "name": "startx",
                    "defaultValue": "0.75"
                },
                {
                    "name": "starty",
                    "defaultValue": "0.5"
                }
            ]
        },
        {
            "acResult": "setworldcoordinates",
            "documentation": "Set up a user defined coordinate-system.\n\nArguments:\nllx -- a number, x-coordinate of lower left corner of canvas\nlly -- a number, y-coordinate of lower left corner of canvas\nurx -- a number, x-coordinate of upper right corner of canvas\nury -- a number, y-coordinate of upper right corner of canvas\n\nSet up user coodinat-system and switch to mode 'world' if necessary.\nThis performs a reset. If mode 'world' is already active,\nall drawings are redrawn according to the new coordinates.\n\nBut ATTENTION: in user-defined coordinatesystems angles may appear\ndistorted. (see Screen.mode())\n\nExample:\n>>> setworldcoordinates(-10,-0.5,50,1.5)\n>>> for _ in range(36):\n...     left(10)\n...     forward(0.5)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "llx"
                },
                {
                    "name": "lly"
                },
                {
                    "name": "urx"
                },
                {
                    "name": "ury"
                }
            ]
        },
        {
            "acResult": "setx",
            "documentation": "Set the turtle's first coordinate to x\n\nArgument:\nx -- a number (integer or float)\n\nSet the turtle's first coordinate to x, leave second coordinate\nunchanged.\n\nExample:\n>>> position()\n(0.00, 240.00)\n>>> setx(10)\n>>> position()\n(10.00, 240.00)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                }
            ]
        },
        {
            "acResult": "sety",
            "documentation": "Set the turtle's second coordinate to y\n\nArgument:\ny -- a number (integer or float)\n\nSet the turtle's first coordinate to x, second coordinate remains\nunchanged.\n\nExample:\n>>> position()\n(0.00, 40.00)\n>>> sety(-10)\n>>> position()\n(0.00, -10.00)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "y"
                }
            ]
        },
        {
            "acResult": "shape",
            "documentation": "Set turtle shape to shape with given name / return current shapename.\n\nOptional argument:\nname -- a string, which is a valid shapename\n\nSet turtle shape to shape with given name or, if name is not given,\nreturn name of current shape.\nShape with name must exist in the TurtleScreen's shape dictionary.\nInitially there are the following polygon shapes:\n'arrow', 'turtle', 'circle', 'square', 'triangle', 'classic'.\nTo learn about how to deal with shapes see Screen-method register_shape.\n\nExample:\n>>> shape()\n'arrow'\n>>> shape(\"turtle\")\n>>> shape()\n'turtle'",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "name",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "showturtle",
            "documentation": "Makes the turtle visible.\n\nAliases: showturtle | st\n\nNo argument.\n\nExample:\n>>> hideturtle()\n>>> showturtle()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "speed",
            "documentation": "Return or set the turtle's speed.\n\nOptional argument:\nspeed -- an integer in the range 0..10 or a speedstring (see below)\n\nSet the turtle's speed to an integer value in the range 0 .. 10.\nIf no argument is given: return current speed.\n\nIf input is a number greater than 10 or smaller than 0.5,\nspeed is set to 0.\nSpeedstrings  are mapped to speedvalues in the following way:\n    'fastest' :  0\n    'fast'    :  10\n    'normal'  :  6\n    'slow'    :  3\n    'slowest' :  1\nspeeds from 1 to 10 enforce increasingly faster animation of\nline drawing and turtle turning.\n\nAttention:\nspeed = 0 : *no* animation takes place. forward/back makes turtle jump\nand likewise left/right make the turtle turn instantly.\n\nExample:\n>>> speed(3)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "speed",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "st",
            "documentation": "Makes the turtle visible.\n\nAliases: showturtle | st\n\nNo argument.\n\nExample:\n>>> hideturtle()\n>>> showturtle()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "stamp",
            "documentation": "Stamp a copy of the turtleshape onto the canvas and return its id.\n\nNo argument.\n\nStamp a copy of the turtle shape onto the canvas at the current\nturtle position. Return a stamp_id for that stamp, which can be\nused to delete it by calling clearstamp(stamp_id).\n\nExample:\n>>> color(\"blue\")\n>>> stamp()\n13\n>>> fd(50)",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "title",
            "documentation": "Set title of turtle-window\n\nArgument:\ntitlestring -- a string, to appear in the titlebar of the\n               turtle graphics window.\n\nThis is a method of Screen-class. Not available for TurtleScreen-\nobjects.\n\nExample:\n>>> title(\"Welcome to the turtle-zoo!\")",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "titlestring"
                }
            ]
        },
        {
            "acResult": "towards",
            "documentation": "Return the angle of the line from the turtle's position to (x, y).\n\nArguments:\nx -- a number   or  a pair/vector of numbers   or   a turtle instance\ny -- a number       None                            None\n\ncall: distance(x, y)         # two coordinates\n--or: distance((x, y))       # a pair (tuple) of coordinates\n--or: distance(vec)          # e.g. as returned by pos()\n--or: distance(mypen)        # where mypen is another turtle\n\nReturn the angle, between the line from turtle-position to position\nspecified by x, y and the turtle's start orientation. (Depends on\nmodes - \"standard\" or \"logo\")\n\nExample:\n>>> pos()\n(10.00, 10.00)\n>>> towards(0,0)\n225.0",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "tracer",
            "documentation": "Turns turtle animation on/off and set delay for update drawings.\n\nOptional arguments:\nn -- nonnegative  integer\ndelay -- nonnegative  integer\n\nIf n is given, only each n-th regular screen update is really performed.\n(Can be used to accelerate the drawing of complex graphics.)\nSecond arguments sets delay value (see RawTurtle.delay())\n\nExample:\n>>> tracer(8, 25)\n>>> dist = 2\n>>> for i in range(200):\n...     fd(dist)\n...     rt(90)\n...     dist += 2",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "n",
                    "defaultValue": "None"
                },
                {
                    "name": "delay",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "turtles",
            "documentation": "Return the list of turtles on the \n\nExample:\n>>> turtles()\n[<turtle.Turtle object at 0x00E11FB0>]",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "undo",
            "documentation": "undo (repeatedly) the last turtle action.\n\nNo argument.\n\nundo (repeatedly) the last turtle action.\nNumber of available undo actions is determined by the size of\nthe undobuffer.\n\nExample:\n>>> for i in range(4):\n...     fd(50); lt(80)\n...\n>>> for i in range(8):\n...     undo()\n...",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "undobufferentries",
            "documentation": "Return count of entries in the undobuffer.\n\nNo argument.\n\nExample:\n>>> while undobufferentries():\n...     undo()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "up",
            "documentation": "Pull the pen up -- no drawing when moving.\n\nAliases: penup | pu | up\n\nNo argument\n\nExample:\n>>> penup()",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "update",
            "documentation": "Perform a TurtleScreen update.",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "width",
            "documentation": "Set or return the line thickness.\n\nAliases:  pensize | width\n\nArgument:\nwidth -- positive number\n\nSet the line thickness to width or return it. If resizemode is set\nto \"auto\" and turtleshape is a polygon, that polygon is drawn with\nthe same line thickness. If no argument is given, current pensize\nis returned.\n\nExample:\n>>> pensize()\n1\n>>> pensize(10)   # from here on lines of width 10 are drawn",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "width",
                    "defaultValue": "None"
                }
            ]
        },
        {
            "acResult": "window_height",
            "documentation": "Return the height of the turtle window.\n\nExample:\n>>> window_height()\n480",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "window_width",
            "documentation": "Return the width of the turtle window.\n\nExample:\n>>> window_width()\n640",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "write",
            "documentation": "Write text at the current turtle position.\n\nArguments:\narg -- info, which is to be written to the TurtleScreen\nmove (optional) -- True/False\nalign (optional) -- one of the strings \"left\", \"center\" or right\"\nfont (optional) -- a triple (fontname, fontsize, fonttype)\n\nWrite text - the string representation of arg - at the current\nturtle position according to align (\"left\", \"center\" or right\")\nand with the given font.\nIf move is True, the pen is moved to the bottom-right corner\nof the text. By default, move is False.\n\nExample:\n>>> write('Home = ', True, align=\"center\")\n>>> write((0,0), True)",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "arg"
                },
                {
                    "name": "move",
                    "defaultValue": "('Arial', 8, 'normal')"
                },
                {
                    "name": "align",
                    "defaultValue": "left"
                },
                {
                    "name": "font",
                    "defaultValue": "False"
                }
            ]
        },
        {
            "acResult": "xcor",
            "documentation": "Return the turtle's x coordinate.\n\nNo arguments.\n\nExample:\n>>> reset()\n>>> left(60)\n>>> forward(100)\n>>> print xcor()\n50.0",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "ycor",
            "documentation": "Return the turtle's y coordinate\n---\nNo arguments.\n\nExample:\n>>> reset()\n>>> left(60)\n>>> forward(100)\n>>> print ycor()\n86.6025403784",
            "type": [
                "function"
            ],
            "version": 0
        }
    ],
    "strype.graphics": [
        {
            "acResult": "Actor",
            "documentation": "\n    An Actor is an item in the world with a specific image, position, rotation and scale.  Everything you want to show up\n    in your graphics must be an Actor.  \n    ",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "image_or_filename"
                },
                {
                    "name": "x",
                    "defaultValue": "None"
                },
                {
                    "name": "y",
                    "defaultValue": "0"
                },
                {
                    "name": "tag",
                    "defaultValue": "0"
                }
            ]
        },
        {
            "acResult": "Color",
            "documentation": "\n    A Color class with members red, green, blue, alpha, in the range 0--255.\n    ",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "red"
                },
                {
                    "name": "green"
                },
                {
                    "name": "blue"
                },
                {
                    "name": "alpha",
                    "defaultValue": "255"
                }
            ]
        },
        {
            "acResult": "Dimension",
            "documentation": "\n    A dimension value indicating a width and a height, for example the size of an image.\n    ",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "width"
                },
                {
                    "name": "height"
                }
            ]
        },
        {
            "acResult": "FontFamily",
            "documentation": "\n    A font family is a particular font type, e.g. Arial or Courier.\n    ",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "font_provider"
                },
                {
                    "name": "font_name"
                }
            ]
        },
        {
            "acResult": "Image",
            "documentation": "\n    An editable image of fixed width and height.\n    ",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "width"
                },
                {
                    "name": "height"
                }
            ]
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "_collections",
            "documentation": "This module implements specialized container datatypes providing\nalternatives to Python's general purpose built-in containers, dict,\nlist, set, and tuple.\n\n* namedtuple   factory function for creating tuple subclasses with named fields\n* deque        list-like container with fast appends and pops on either end\n* ChainMap     dict-like class for creating a single view of multiple mappings\n* Counter      dict subclass for counting hashable objects\n* OrderedDict  dict subclass that remembers the order entries were added\n* defaultdict  dict subclass that calls a factory function to supply missing values\n* UserDict     wrapper around dictionary objects for easier dict subclassing\n* UserList     wrapper around list objects for easier list subclassing\n* UserString   wrapper around string objects for easier string subclassing",
            "type": [
                "module"
            ],
            "version": 0
        },
        {
            "acResult": "_color_map",
            "documentation": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "_last_frame",
            "documentation": "Convert a string or number to a floating point number, if possible.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "_math",
            "documentation": "This module provides access to the mathematical functions\ndefined by the C standard.",
            "type": [
                "module"
            ],
            "version": 0
        },
        {
            "acResult": "_re",
            "documentation": "Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string 'last'.\n\nThe special characters are:\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?aiLmsux) The letters set the corresponding flags defined below.\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\n    (?!...)  Matches if ... doesn't match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode digits.\n    \\D       Matches any non-digit character; equivalent to [^\\d].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode whitespace characters.\n    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]\n             in bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the\n             range of Unicode alphanumeric characters (letters plus digits\n             plus underscore).\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match     Match a regular expression pattern to the beginning of a string.\n    fullmatch Match a regular expression pattern to all of a string.\n    search    Search a string for the presence of a pattern.\n    sub       Substitute occurrences of a pattern found in a string.\n    subn      Same as sub, but also return the number of substitutions made.\n    split     Split a string by the occurrences of a pattern.\n    findall   Find all occurrences of a pattern in a string.\n    finditer  Return an iterator yielding a Match object for each match.\n    compile   Compile a pattern into a Pattern object.\n    purge     Clear the regular expression cache.\n    escape    Backslash all non-alphanumerics in a string.\n\nEach function other than purge and escape can take an optional 'flags' argument\nconsisting of one or more of the following module constants, joined by \"|\".\nA, L, and U are mutually exclusive.\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n                   match the corresponding ASCII character categories\n                   (rather than the whole Unicode categories, which is the\n                   default).\n                   For bytes patterns, this flag is the only available\n                   behaviour and needn't be specified.\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\n                   is the default), and forbidden for bytes patterns.\n\nThis module also defines an exception 'error'.",
            "type": [
                "module"
            ],
            "version": 0
        },
        {
            "acResult": "_round_and_clamp_0_255",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "number"
                }
            ]
        },
        {
            "acResult": "_strype_graphics_internal",
            "documentation": "",
            "type": [
                "module"
            ],
            "version": 0
        },
        {
            "acResult": "_strype_input_internal",
            "documentation": "",
            "type": [
                "module"
            ],
            "version": 0
        },
        {
            "acResult": "_time",
            "documentation": "This module provides various functions to manipulate time values.\n\nThere are two standard representations of time.  One is the number\nof seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer\nor a floating point number (to represent fractions of seconds).\nThe Epoch is system-defined; on Unix, it is generally January 1st, 1970.\nThe actual value can be retrieved by calling gmtime(0).\n\nThe other representation is a tuple of 9 integers giving local time.\nThe tuple items are:\n  year (including century, e.g. 1998)\n  month (1-12)\n  day (1-31)\n  hours (0-23)\n  minutes (0-59)\n  seconds (0-59)\n  weekday (0-6, Monday is 0)\n  Julian day (day in the year, 1-366)\n  DST (Daylight Savings Time) flag (-1, 0 or 1)\nIf the DST flag is 0, the time is given in the regular time zone;\nif it is 1, the time is given in the DST time zone;\nif it is -1, mktime() should guess based on the date and time.",
            "type": [
                "module"
            ],
            "version": 0
        },
        {
            "acResult": "color_from_string",
            "documentation": "\n    Converts a string that is either a color name (e.g. \"red\") or a hex string (e.g. \"#ff0000\") to\n    a Color object.  The hex string can either be 6 hex digits (in which case alpha is assumed to be 255)\n    or 8 hex digits (which includes the alpha)\n    \n    :param html_string: A string as described above.\n    :raises ValueError: If the string is not recognised as a color name or valid 6 or 8 digit hex string.\n    :return: A Color object.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "html_string"
                }
            ]
        },
        {
            "acResult": "get_clicked_actor",
            "documentation": "\n    Gets the last clicked Actor (or None if nothing was clicked since the last call to this function).  Be careful that if you call this twice\n    in quick succession, the second call will almost certainly be None.  If you need to compare the result of this function\n    to several other things, assign it to a variable first.\n    \n    :return: The most recently clicked Actor, or None if nothing was clicked since you last called this function.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "in_bounds",
            "documentation": "\n    Checks if the given X, Y position is in the visible bounds of (-399,-299) inclusive to (400, 300) exclusive.\n    \n    :param x: The x position to check\n    :param y: The y position to check\n    :return: A boolean indicating whether it is in the visible bounds: True if it is in bounds, False if it is not.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "x"
                },
                {
                    "name": "y"
                }
            ]
        },
        {
            "acResult": "key_pressed",
            "documentation": "\n    Checks if the given key is currently pressed.  Note that because the user may be pressing and releasing keys all the time,\n    consecutive calls to this function with the same key name may not give the same result.\n    \n    :param keyname: The name of the key.  This can be a single letter like \"a\" or a key name like \"up\", \"down\". \n    :return: Either True or False depending on whether the key is currently pressed.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "keyname"
                }
            ]
        },
        {
            "acResult": "load_image",
            "documentation": "\n    Loads the given image file as an Image object.\n    \n    Note: you can pass a filename for the image, which is an image name from Strype's image library,\n        or a URL to an image.  Using a URL requires the server to allow remote image loading from Javascript via a feature\n        called CORS.   Many servers do not allow this, so you may get an error even if the URL is valid and\n        you can load the image in a browser yourself.\n    \n    :param filename: The built-in Strype filename, or URL, of the image to load.\n    :return: An Image object with the same image and dimensions as the given file\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "filename"
                }
            ]
        },
        {
            "acResult": "pause",
            "documentation": "\n    Waits for a suitable amount of time since the last call to pause().  This is almost always used as follows:\n    \n    ```\n    while True:\n        # Do all the actions you want to do in one go\n        pause(30)\n    ```\n    \n    Where 30 is the number of times you want to do those actions per second.  It is like sleeping\n    for 1/30th of a second, but it accounts for the fact that your actions may have taken some time,\n    so it aims to keep you executing the actions 30 times per second (or whatever value you pass\n    for actions_per_second).\n    \n    :param actions_per_second: The amount of times you want to call pause() per second, 25 by default.\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "actions_per_second",
                    "defaultValue": "25"
                }
            ]
        },
        {
            "acResult": "set_background",
            "documentation": "\n    Sets the current background image.\n    \n    The parameter can be an Image, a color, a filename of an image in Strype's image library, or a URL.\n    Using a URL requires the server to allow remote image loading from Javascript via a feature\n        called CORS.   Many servers do not allow this, so you may get an error even if the URL is valid and\n        you can load the image in a browser yourself.\n    \n    If tile_to_fit is True and the background image is smaller than 800x600, it will be tiled (repeated) to fill the area of 800x600.\n    If tile_to_fit is True and background image is larger than 800x600, it will be centered, and the extra regions will be cut off.\n    If tile_to_fit is False, the background image will be scaled (preserving its aspect ratio) to fit into 800x600, and centered.    \n    \n    The background image is always copied, so later changes to an Image will not be shown in the background;\n    you should call set_background() again to update it.\n    \n    :param image_or_filename_or_color: An Image, an image filename or URL, or a color name or hex string.\n    :param tile_to_fit: Whether to tile the background image to fit (True), or to stretch the image to Fit (False) \n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "image_or_filename_or_color"
                },
                {
                    "name": "tile_to_fit",
                    "defaultValue": "True"
                }
            ]
        },
        {
            "acResult": "stop",
            "documentation": "\n    Stops the whole execution immediately.  Will not return.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        }
    ],
    "strype.sound": [
        {
            "acResult": "Sound",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0,
            "params": [
                {
                    "name": "self",
                    "hide": true
                },
                {
                    "name": "seconds"
                },
                {
                    "name": "samples_per_second",
                    "defaultValue": "44100"
                }
            ]
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "Concrete implementation of SourceLoader using the file system.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "The specification for a module, used for loading.\n\nA module's spec is the source for information about the module.  For\ndata associated with the module, including source, use the spec's\nloader.\n\n`name` is the absolute name of the module.  `loader` is the loader\nto use when loading the module.  `parent` is the name of the\npackage the module is in.  The parent is derived from the name.\n\n`is_package` determines if the module is considered a package or\nnot.  On modules this is reflected by the `__path__` attribute.\n\n`origin` is the specific location used by the loader from which to\nload the module, if that information is available.  When filename is\nset, origin will match.\n\n`has_location` indicates that a spec's \"origin\" reflects a location.\nWhen this is True, `__file__` attribute of the module is set.\n\n`cached` is the location of the cached bytecode file, if any.  It\ncorresponds to the `__cached__` attribute.\n\n`submodule_search_locations` is the sequence of path entries to\nsearch when importing submodules.  If set, is_package should be\nTrue--and False otherwise.\n\nPackages are simply modules that (may) have submodules.  If a spec\nhas a non-None value in `submodule_search_locations`, the import\nsystem will consider modules loaded from the spec as packages.\n\nOnly finders (see importlib.abc.MetaPathFinder and\nimportlib.abc.PathEntryFinder) should modify ModuleSpec instances.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "_strype_sound_internal",
            "documentation": "",
            "type": [
                "module"
            ],
            "version": 0
        },
        {
            "acResult": "load_sound",
            "documentation": "\n    Loads the given sound file as a Sound object.\n\n    Note that most browsers will resample loaded sounded files to a fixed rate (44100 or 48000).\n    So the sample rate of a loaded sound file will probably not match the original file you are loading from.\n    You can call get_sample_rate() on the loaded sound to get the actual sample rate.       \n    \n    Note: you can pass a filename for the sound, which is a sound name from Strype's sound library,\n        or a URL to an image.  Using a URL requires the server to allow remote loading from Javascript via a feature\n        called CORS.   Many servers do not allow this, so you may get an error even if the URL is valid and\n        you can load the sound in a browser yourself.\n\n    :param source: The filename or URL to a sound file \n    :return: The loaded sound\n    ",
            "type": [
                "function"
            ],
            "version": 0,
            "params": [
                {
                    "name": "source"
                }
            ]
        }
    ],
    "strype.mediacomp": [
        {
            "acResult": "Color",
            "documentation": "Color(red, green, blue)",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "Font",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "MainImage",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "Pixel",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "Sample",
            "documentation": "",
            "type": [
                "function",
                "type"
            ],
            "version": 0
        },
        {
            "acResult": "__doc__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__file__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__loader__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__name__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__package__",
            "documentation": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
            "type": [],
            "version": 0
        },
        {
            "acResult": "__spec__",
            "documentation": "",
            "type": [],
            "version": 0
        },
        {
            "acResult": "_cachePixels",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "_collections",
            "documentation": "",
            "type": [
                "module"
            ],
            "version": 0
        },
        {
            "acResult": "_convertColor",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "_from_short",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "_graphics",
            "documentation": "",
            "type": [
                "module"
            ],
            "version": 0
        },
        {
            "acResult": "_invalidateCache",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "_math",
            "documentation": "",
            "type": [
                "module"
            ],
            "version": 0
        },
        {
            "acResult": "_scaleColor",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "_sound",
            "documentation": "",
            "type": [
                "module"
            ],
            "version": 0
        },
        {
            "acResult": "_to_short",
            "documentation": "",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "addArc",
            "documentation": "\n    Adds an outline of an arc starting at (x,y) at an initial angle of \"start\"with the given width and height. The angle of the arc itself is \"angle\", which is relativeto \"start.\" Default color is black.\n    \n    :param picture: The picture to draw the arc on.\n    :param startX: The x-coordinate of the arc's center.\n    :param startY: The y-coordinate of the arc's center.\n    :param width: The width of the arc.\n    :param height: The height of the arc.\n    :param start: The start angle of the arc in degrees.\n    :param angle: The angle of the arc relative to start in degrees.\n    :param color: The color to draw the arc in (default: black).\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "addArcFilled",
            "documentation": "\n    Adds a filled arc starting at (x,y) at an initial angle of \"start\" with the given width and height. The angle of the arc itself is \"angle\", which is relative to \"start.\"\n    \n    :param picture: The picture to draw the arc on.\n    :param startX: The x-coordinate of the arc's center.\n    :param startY: The y-coordinate of the arc's center.\n    :param width: The width of the arc.\n    :param height: The height of the arc.\n    :param start: The start angle of the arc in degrees.\n    :param angle: The angle of the arc relative to start in degrees.\n    :param color: The color to draw the arc in (default: black).\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "addLine",
            "documentation": "\n    Draws a line on the picture.\n    :param picture: The picture to draw the line on.\n    :param startX: The x-coordinate where the line starts.\n    :param startY: The y-coordinate where the line starts.\n    :param endX: The x-coordinate where the line ends.\n    :param endY: The y-coordinate where the line ends.\n    :param color: The color to draw the line in (default: black).\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "addOval",
            "documentation": "\n    Draws an outline of an oval on the picture.\n    :param picture: The picture to draw the oval on.\n    :param startX: The x-coordinate of the upper left corner of the bounding rectangle.\n    :param startY: The y-coordinate of the upper left corner of the bounding rectangle.\n    :param width: The width of the oval.\n    :param height: The height of the oval.\n    :param color: The color to draw the oval in (default: black).\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "addOvalFilled",
            "documentation": "\n    Draws a filled oval on the picture.\n    :param picture: The picture to draw the oval on.\n    :param startX: The x-coordinate of the upper left corner of the bounding rectangle.\n    :param startY: The y-coordinate of the upper left corner of the bounding rectangle.\n    :param width: The width of the oval.\n    :param height: The height of the oval.\n    :param color: The color to draw the oval in (default: black).\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "addRect",
            "documentation": "\n    Draws an outline of a rectangle on the picture.\n    :param picture: The picture to draw the rectangle on.\n    :param startX: The x-coordinate of the upper left corner of the rectangle.\n    :param startY: The y-coordinate of the upper left corner of the rectangle.\n    :param width: The width of the rectangle.\n    :param height: The height of the rectangle.\n    :param color: The color to draw the rectangle in (default: black).\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "addRectFilled",
            "documentation": "\n    Draws a filled rectangle on the picture.\n    :param picture: The picture to draw the rectangle on.\n    :param startX: The x-coordinate of the upper left corner of the rectangle.\n    :param startY: The y-coordinate of the upper left corner of the rectangle.\n    :param width: The width of the rectangle.\n    :param height: The height of the rectangle.\n    :param color: The color to draw the rectangle in (default: black).\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "addText",
            "documentation": "\n    Draws text on the picture.\n    :param picture: The picture to add the text to.\n    :param xpos: The x-coordinate where the text begins.\n    :param ypos: The y-coordinate where the text begins.\n    :param text: The text to display.\n    :param color: The color of the text (default: black).\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "addTextWithStyle",
            "documentation": "\n    Draws styled text on the picture.\n    :param picture: The picture to add the text to.\n    :param xpos: The x-coordinate where the text begins.\n    :param ypos: The y-coordinate where the text begins.\n    :param text: The text to display.\n    :param style: The font style (see makeStyle).\n    :param color: The color of the text (default: black).\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "black",
            "documentation": "Color(red, green, blue)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "blockingPlay",
            "documentation": "\n    :param sound: the sound that you want to play.\n    Plays the sound provided as input, and makes sure that no other sound plays at the exact same time. (Try two play's right after each other.)\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "blue",
            "documentation": "Color(red, green, blue)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "copyInto",
            "documentation": "\n    Copies a smaller picture into a larger one.\n    :param smallPicture: The picture to be pasted.\n    :param bigPicture: The picture to paste onto.\n    :param startX: The x-coordinate in bigPicture to place smallPicture.\n    :param startY: The y-coordinate in bigPicture to place smallPicture.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "cyan",
            "documentation": "Color(red, green, blue)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "darkGray",
            "documentation": "Color(red, green, blue)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "distance",
            "documentation": "\n    Returns the Cartesian distance between two colors.\n    :param color1: The first color.\n    :param color2: The second color.\n    :return: The distance between the two colors.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "duplicatePicture",
            "documentation": "\n    Creates a duplicate of the given picture.\n    :param picture: The picture to duplicate.\n    :return: A new picture object identical to the original.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "duplicateSound",
            "documentation": "\n    :param sound: the sound you want to duplicate\n    :returns: a new Sound object with the same Sample values as the original\n    Takes a sound as input and returns a new Sound object with the same Sample values as the original.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getBlue",
            "documentation": "\n    Gets the blue value of a pixel.\n    :param pixel: The pixel to extract blue from.\n    :return: The blue component (0-255).\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getColor",
            "documentation": "\n    Gets the color of a pixel.\n    :param pixel: The pixel to get the color from.\n    :return: The color of the pixel.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getDuration",
            "documentation": "\n    :param sound: the sound you want to find the length of (in seconds)\n    :returns: the number of seconds the sound lasts\n    Takes a sound as input and returns the number of seconds that sound lasts.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getGreen",
            "documentation": "\n    Gets the green value of a pixel.\n    :param pixel: The pixel to extract green from.\n    :return: The green component (0-255).\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getHeight",
            "documentation": "\n    Returns the height of the picture.\n    :param picture: The picture to measure.\n    :return: The height in pixels.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getLength",
            "documentation": "\n    :param sound: the sound you want to find the length of (how many samples it has)\n    :returns: the number of samples in sound\n    Takes a sound as input and returns the number of samples in that sound.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getNumSamples",
            "documentation": "\n    :param sound: the sound you want to find the length of (how many samples it has)\n    :returns: the number of samples in sound\n    Takes a sound as input and returns the number of samples in that sound. (Same as getLength)\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getPixel",
            "documentation": "\n    Gets a pixel from a specific position in the picture.\n    \n    :param picture: The picture to get the pixel from.\n    :param xpos: The x-coordinate of the pixel.\n    :param ypos: The y-coordinate of the pixel.\n    :return: The pixel object.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getPixelAt",
            "documentation": " Same as getPixel. ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getPixels",
            "documentation": "\n    Takes a picture as input and returns the sequence of Pixel objects in the picture.\n    :param picture: The picture you want to get the pixels from.\n    :return: A list of all the pixels in the picture.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getRed",
            "documentation": "\n    Gets the red value of a pixel.\n    :param pixel: The pixel to extract red from.\n    :return: The red component (0-255).\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getSampleObjectAt",
            "documentation": "\n    :param sound: the sound you want to get the sample from\n    :param index: the index value of the sample you want to get\n    :returns: the sample object at that index\n    Takes a sound and an index (an integer value), and returns the Sample object at that index.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getSampleValue",
            "documentation": "\n    :param sample: a sample of a sound\n    :returns: the integer value of that sample\n    Takes a Sample object and returns its value (between -32768 and 32767). (Formerly getSample)\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getSampleValueAt",
            "documentation": "\n    :param sound: the sound you want to get the sample from\n    :param index: the index of the sample you want to get the value of\n    Takes a sound and an index (an integer value), and returns the value of the sample (between -32768 and 32767) for that object.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getSamples",
            "documentation": "\n    :param sound: the sound you want to get the samples from\n    :returns: a list of all the samples in the sound\n    Takes a sound as input and returns the Samples in that sound.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getSamplingRate",
            "documentation": "\n    :param sound: the sound you want to get the sampling rate from\n    :returns: the integer value representing the number of samples per second\n    Takes a sound as input and returns the number representing the number of samples in each second for the sound.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getSound",
            "documentation": "\n    :param sample: a sample belonging to a sound\n    :returns: the sound the sample belongs to\n    Takes a Sample object and returns the Sound that it belongs to.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getWidth",
            "documentation": "\n    Returns the width of the picture.\n    :param picture: The picture to measure.\n    :return: The width in pixels.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getX",
            "documentation": "\n    Gets the X position of a pixel within its picture\n    :param pixel: The pixel to find the X-coordinate of\n    :return: The X coordinate of the pixel.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "getY",
            "documentation": "\n    Gets the Y position of a pixel within its picture\n    :param pixel: The pixel to find the Y-coordinate of\n    :return: The Y coordinate of the pixel.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "gray",
            "documentation": "Color(red, green, blue)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "green",
            "documentation": "Color(red, green, blue)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "lightGray",
            "documentation": "Color(red, green, blue)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "magenta",
            "documentation": "Color(red, green, blue)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "makeBrighter",
            "documentation": "\n    Returns a brighter version of the color.\n    :param color: The color to brighten.\n    :return: The brightened color.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "makeColor",
            "documentation": "\n    Creates a color from RGB values.\n    :param red: The red component (0-255).\n    :param green: The green component (optional, 0-255).\n    :param blue: The blue component (optional, 0-255).\n    :return: The created color.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "makeDarker",
            "documentation": "\n    Returns a darker version of the color.\n    :param color: The color to darken.\n    :return: The darkened color.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "makeEmptyPicture",
            "documentation": "\n    Creates an empty picture with specified dimensions and color.\n    :param width: The width of the picture.\n    :param height: The height of the picture.\n    :param color: The background color (default: white).\n    :return: The empty picture.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "makeEmptySound",
            "documentation": "\n    :param numSamples: the number of samples in sound\n    :param samplingRate: the integer value representing the number of samples per second of sound (optional)\n    :returns: An Empty Sound.\n    Takes one or two integers as input. Returns an empty Sound object with the given number of samples and (optionally) the given sampling rate. Default rate is 22050 bits/second. The resulting sound must not be longer than 600 seconds. Prints an error statement if numSamples or samplingRate are less than 0, or if (numSamples/samplingRate) > 600.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "makeEmptySoundBySeconds",
            "documentation": "\n    :param duration: the time in seconds for the duration of the sound\n    :param samplingRate: the integer value representing the number of samples per second of sound (optional)\n    :returns: An Empty Sound.\n    Takes a floating point number and optionally an integer as input. Returns an empty Sound object of the given duration and (optionally) the given sampling rate. Default rate is 22050 bits/second. If the given arguments do not multiply to an integer, the number of samples is rounded up. Prints an error statement if duration or samplingRate are less than 0, or if duration > 600.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "makePicture",
            "documentation": "\n    Takes a filename as input, reads the file, and creates a picture from it. Returns the picture.\n    :param path: the name of the file you want to open as a picture\n    :return: a picture object made from the file\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "makeSound",
            "documentation": "\n    :param path: a string path of a wav file\n    :returns: the sound created from the file at the given path\n    Takes a filename as input, reads the file, and creates a sound from it. Returns the sound.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "makeStyle",
            "documentation": "\n    Takes a font name, emphasis, and size in points as input. Returns a Font object with the given parameters.\n    :param fontName: The name of the font (e.g., \"sansSerif\").\n    :param emphasis: The emphasis (e.g., \"italic\").  This parameter is currently unsupported.\n    :param size: The font size.\n    :return the style made from the inputs\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "orange",
            "documentation": "Color(red, green, blue)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "pink",
            "documentation": "Color(red, green, blue)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "play",
            "documentation": "\n    :param sound: the sound you want to be played.\n    Plays a sound provided as input. No return value.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "red",
            "documentation": "Color(red, green, blue)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "repaint",
            "documentation": "\n    Repaints the picture. Opens a new window if the picture has not been shown.\n\n    :param picture: The picture to repaint.\n    :type picture: Picture\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "setAllPixelsToAColor",
            "documentation": "\n    Sets every pixel in the picture to the specified color.\n\n    :param picture: The picture to modify.\n    :type picture: Picture\n    :param color: The color to apply to each pixel.\n    :type color: Color\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "setBlue",
            "documentation": "\n    Sets the blue component of a pixel.\n\n    :param pixel: The pixel to modify.\n    :type pixel: Pixel\n    :param blueValue: The new blue value (0 - 255).\n    :type blueValue: int\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "setColor",
            "documentation": "\n    Sets the specified color to a pixel.\n\n    :param pixel: The pixel to set the color for.\n    :type pixel: Pixel\n    :param color: The color to apply to the pixel.\n    :type color: Color\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "setGreen",
            "documentation": "\n    Sets the green component of a pixel.\n\n    :param pixel: The pixel to modify.\n    :type pixel: Pixel\n    :param greenValue: The new green value (0 - 255).\n    :type greenValue: int\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "setRed",
            "documentation": "\n    Sets the red component of a pixel.\n\n    :param pixel: The pixel to modify.\n    :type pixel: Pixel\n    :param redValue: The new red value (0 - 255).\n    :type redValue: int\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "setSampleValue",
            "documentation": "\n    :param sample: the sound sample you want to change the value of\n    :param value: the value you want to set the sample to\n    Takes a Sample object and a value (should be between -32768 and 32767), and sets the sample to that value.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "setSampleValueAt",
            "documentation": "\n    :param sound: the sound you want to change a sample in\n    :param index: the index of the sample you want to set\n    :param value: the value you want to set the sample to\n    Takes a sound, an index, and a value (should be between -32768 and 32767), and sets the value of the sample at the given index in the given sound to the given value.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "show",
            "documentation": "\n    Displays the specified picture.\n\n    :param picture: The picture to display.\n    :type picture: Picture\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "stopPlaying",
            "documentation": "\n    :param sound: the sound that you want to stop playing\n    Stops a sound that is currently playing.\n    ",
            "type": [
                "function"
            ],
            "version": 0
        },
        {
            "acResult": "white",
            "documentation": "Color(red, green, blue)",
            "type": [],
            "version": 0
        },
        {
            "acResult": "yellow",
            "documentation": "Color(red, green, blue)",
            "type": [],
            "version": 0
        }
    ]
}